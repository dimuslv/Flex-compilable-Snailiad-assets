package
{
   import org.flixel.FlxG;
   import org.flixel.FlxSprite;
   import org.flixel.FlxU;
   
   public class StarInward extends FlxSprite
   {
      private static const IMG_WIDTH:int = 16;
      
      private static const IMG_HEIGHT:int = 16;
      
      method
      name null
      returns null
      
      body
      maxstack 2
      localcount 1
      initscopedepth 7
      maxscopedepth 8
      
      code
      getlocal0
      pushscope
      findproperty QName(PrivateNamespace(null,"341"),"IMG_WIDTH")
      pushbyte 16
      initproperty QName(PrivateNamespace(null,"341"),"IMG_WIDTH")
      findproperty QName(PrivateNamespace(null,"341"),"IMG_HEIGHT")
      pushbyte 16
      initproperty QName(PrivateNamespace(null,"341"),"IMG_HEIGHT")
      returnvoid
      end ; code
      end ; body
      end ; method
      
      public function StarInward()
      {
         method
         name null
         returns null
         
         body
         maxstack 6
         localcount 2
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         findpropstrict QName(PackageNamespace(""),"loadGraphic")
         getlex QName(PackageNamespace(""),"Art")
         getproperty QName(PackageNamespace(""),"Star")
         pushtrue
         pushtrue
         getlex QName(PrivateNamespace(null,"341"),"IMG_WIDTH")
         getlex QName(PrivateNamespace(null,"341"),"IMG_HEIGHT")
         callpropvoid QName(PackageNamespace(""),"loadGraphic"), 5
         findproperty QName(PackageNamespace(""),"width")
         getlex QName(PrivateNamespace(null,"341"),"IMG_WIDTH")
         initproperty QName(PackageNamespace(""),"width")
         findproperty QName(PackageNamespace(""),"height")
         getlex QName(PrivateNamespace(null,"341"),"IMG_HEIGHT")
         initproperty QName(PackageNamespace(""),"height")
         findpropstrict QName(PackageNamespace(""),"addAnimation")
         pushstring "normal"
         findpropstrict QName(PackageNamespace(""),"int")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         pushbyte 32
         multiply
         callproperty QName(PackageNamespace(""),"int"), 1
         newarray 1
         callpropvoid QName(PackageNamespace(""),"addAnimation"), 2
         findpropstrict QName(PackageNamespace(""),"play")
         pushstring "normal"
         callpropvoid QName(PackageNamespace(""),"play"), 1
         getlex QName(PackageNamespace(""),"scrollFactor")
         getlex QName(PackageNamespace(""),"scrollFactor")
         pushbyte 0
         dup
         setlocal1
         setproperty QName(PackageNamespace(""),"y")
         getlocal1
         kill 1
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"placeRandom"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function placeRandom() : void
      {
         trait method QName(PackageNamespace(""),"placeRandom")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 6
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         pushnan
         setlocal1
         pushnan
         setlocal2
         getlex QName(PackageNamespace(""),"NaN")
         convert_d
         setlocal1
         getlex QName(PackageNamespace(""),"NaN")
         convert_d
         setlocal2
         jump ofs00a5
         ofs0014:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         multiply
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace(""),"height")
         negate
         initproperty QName(PackageNamespace(""),"y")
         jump ofs0110
         ofs0037:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         multiply
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"height")
         initproperty QName(PackageNamespace(""),"y")
         jump ofs0110
         ofs005c:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"width")
         negate
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"height")
         multiply
         initproperty QName(PackageNamespace(""),"y")
         jump ofs0110
         ofs007f:
         label
         findproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         initproperty QName(PackageNamespace(""),"x")
         findproperty QName(PackageNamespace(""),"y")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"height")
         multiply
         initproperty QName(PackageNamespace(""),"y")
         ofs00a0:
         label
         jump ofs0110
         ofs00a5:
         findpropstrict QName(PackageNamespace(""),"int")
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         pushbyte 4
         multiply
         callproperty QName(PackageNamespace(""),"int"), 1
         setlocal 5
         pushbyte 0
         getlocal 5
         ifstrictne ofs00c4
         pushbyte 0
         jump ofs00fa
         ofs00c4:
         pushbyte 1
         getlocal 5
         ifstrictne ofs00d2
         pushbyte 1
         jump ofs00fa
         ofs00d2:
         pushbyte 2
         getlocal 5
         ifstrictne ofs00e0
         pushbyte 2
         jump ofs00fa
         ofs00e0:
         pushbyte 3
         getlocal 5
         ifstrictne ofs00ee
         pushbyte 3
         jump ofs00fa
         ofs00ee:
         jump ofs00f8
         pushbyte 4
         jump ofs00f8
         ofs00f8:
         pushbyte 4
         ofs00fa:
         kill 5
         lookupswitch ofs00a0, [ofs0014, ofs0037, ofs005c, ofs007f, ofs00a0]
         ofs0110:
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         convert_i
         setlocal3
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"height")
         pushbyte 2
         divide
         convert_i
         setlocal 4
         getlex QName(PackageNamespace(""),"Math")
         getlocal 4
         getlex QName(PackageNamespace(""),"y")
         subtract
         getlocal3
         getlex QName(PackageNamespace(""),"x")
         subtract
         callproperty QName(PackageNamespace(""),"atan2"), 2
         convert_d
         setlocal1
         getlex QName(PackageNamespace("org.flixel"),"FlxU")
         callproperty QName(PackageNamespace(""),"random"), 0
         pushbyte 120
         multiply
         pushbyte 60
         add
         convert_d
         setlocal2
         getlex QName(PackageNamespace(""),"velocity")
         getlocal2
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         callproperty QName(PackageNamespace(""),"cos"), 1
         multiply
         setproperty QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace(""),"velocity")
         getlocal2
         getlex QName(PackageNamespace(""),"Math")
         getlocal1
         callproperty QName(PackageNamespace(""),"sin"), 1
         multiply
         setproperty QName(PackageNamespace(""),"y")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override public function update() : void
      {
         trait method QName(PackageNamespace(""),"update")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 1
         initscopedepth 8
         maxscopedepth 9
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         lessthan
         dup
         iffalse ofs0025
         pop
         getlex QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         getlex QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         add
         lessthan
         ofs0025:
         iffalse ofs002e
         getlocal0
         callpropvoid QName(PackageNamespace(""),"placeRandom"), 0
         ofs002e:
         getlex QName(PackageNamespace(""),"velocity")
         getproperty QName(PackageNamespace(""),"x")
         pushbyte 0
         greaterthan
         dup
         iffalse ofs0051
         pop
         getlex QName(PackageNamespace(""),"x")
         getlex QName(PackageNamespace("org.flixel"),"FlxG")
         getproperty QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         getlex QName(PackageNamespace(""),"width")
         pushbyte 2
         divide
         subtract
         greaterthan
         ofs0051:
         iffalse ofs005a
         getlocal0
         callpropvoid QName(PackageNamespace(""),"placeRandom"), 0
         ofs005a:
         getlocal0
         callsupervoid QName(PackageNamespace(""),"update"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}

method
name null
returns null

body
maxstack 2
localcount 1
initscopedepth 1
maxscopedepth 7

code
getlocal0
pushscope
findpropstrict Multiname("StarInward",[PackageNamespace("")])
getlex QName(PackageNamespace(""),"Object")
pushscope
getlex QName(PackageNamespace("org.flixel"),"FlxPoint")
pushscope
getlex QName(PackageNamespace("org.flixel"),"FlxRect")
pushscope
getlex QName(PackageNamespace("org.flixel"),"FlxObject")
pushscope
getlex QName(PackageNamespace("org.flixel"),"FlxSprite")
pushscope
getlex QName(PackageNamespace("org.flixel"),"FlxSprite")
newclass 768
popscope
popscope
popscope
popscope
popscope
initproperty QName(PackageNamespace(""),"StarInward")
returnvoid
end ; code
end ; body
end ; method

