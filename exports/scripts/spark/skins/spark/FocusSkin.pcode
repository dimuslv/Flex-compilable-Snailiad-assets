package spark.skins.spark
{
   import flash.filters.GlowFilter;
   import flash.geom.ColorTransform;
   import flash.geom.Point;
   import flash.geom.Rectangle;
   import mx.core.mx_internal;
   
   use namespace mx_internal;
   
   public class FocusSkin extends HighlightBitmapCaptureSkin
   {
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      private static var colorTransform:ColorTransform;
      
      private static var glowFilter:GlowFilter;
      
      private static var rect:Rectangle;
      
      private static var filterPt:Point;
      
      method
      name null
      returns null
      
      body
      maxstack 10
      localcount 1
      initscopedepth 11
      maxscopedepth 12
      
      code
      getlocal0
      pushscope
      findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
      pushstring "4.1.0.16076"
      initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
      findproperty QName(PrivateNamespace(null,"10"),"colorTransform")
      findpropstrict QName(PackageNamespace("flash.geom"),"ColorTransform")
      pushdouble 1.01
      pushdouble 1.01
      pushdouble 1.01
      pushbyte 2
      constructprop QName(PackageNamespace("flash.geom"),"ColorTransform"), 4
      setproperty QName(PrivateNamespace(null,"10"),"colorTransform")
      findproperty QName(PrivateNamespace(null,"10"),"glowFilter")
      findpropstrict QName(PackageNamespace("flash.filters"),"GlowFilter")
      pushint 7385838
      pushdouble 0.85
      pushbyte 5
      dup
      pushbyte 3
      pushbyte 1
      pushfalse
      pushtrue
      constructprop QName(PackageNamespace("flash.filters"),"GlowFilter"), 8
      setproperty QName(PrivateNamespace(null,"10"),"glowFilter")
      findproperty QName(PrivateNamespace(null,"10"),"rect")
      findpropstrict QName(PackageNamespace("flash.geom"),"Rectangle")
      constructprop QName(PackageNamespace("flash.geom"),"Rectangle"), 0
      setproperty QName(PrivateNamespace(null,"10"),"rect")
      findproperty QName(PrivateNamespace(null,"10"),"filterPt")
      findpropstrict QName(PackageNamespace("flash.geom"),"Point")
      constructprop QName(PackageNamespace("flash.geom"),"Point"), 0
      setproperty QName(PrivateNamespace(null,"10"),"filterPt")
      returnvoid
      end ; code
      end ; body
      end ; method
      
      private const BLUR_MULTIPLIER:Number = 2.5;
      
      private const ALPHA_MULTIPLIER:Number = 1.5454;
      
      public function FocusSkin()
      {
         method
         name null
         returns null
         
         body
         maxstack 1
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function get borderWeight() : Number
      {
         trait getter QName(ProtectedNamespace("spark.skins.spark:FocusSkin"),"borderWeight")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlex QName(PackageNamespace(""),"target")
         iffalse ofs0014
         getlex QName(PackageNamespace(""),"target")
         pushstring "focusThickness"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         returnvalue
         ofs0014:
         findpropstrict QName(PackageNamespace(""),"getStyle")
         pushstring "focusThickness"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      override protected function updateDisplayList(param1:Number, param2:Number) : void
      {
         trait method QName(ProtectedNamespace("spark.skins.spark:FocusSkin"),"updateDisplayList")
         flag OVERRIDE
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         getlocal2
         callsupervoid QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"updateDisplayList"), 2
         getlex QName(PackageNamespace(""),"target")
         iffalse ofs0020
         findproperty QName(PackageNamespace(""),"blendMode")
         getlex QName(PackageNamespace(""),"target")
         pushstring "focusBlendMode"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         initproperty QName(PackageNamespace(""),"blendMode")
         ofs0020:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      override protected function processBitmap() : void
      {
         trait method QName(ProtectedNamespace("spark.skins.spark:FocusSkin"),"processBitmap")
         flag OVERRIDE
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 2
         initscopedepth 12
         maxscopedepth 13
         
         code
         getlocal0
         pushscope
         getlex QName(PrivateNamespace(null,"10"),"rect")
         getlex QName(PrivateNamespace(null,"10"),"rect")
         pushbyte 0
         dup
         setlocal1
         setproperty QName(PackageNamespace(""),"y")
         getlocal1
         kill 1
         setproperty QName(PackageNamespace(""),"x")
         getlex QName(PrivateNamespace(null,"10"),"rect")
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         getproperty QName(PackageNamespace(""),"width")
         setproperty QName(PackageNamespace(""),"width")
         getlex QName(PrivateNamespace(null,"10"),"rect")
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         getproperty QName(PackageNamespace(""),"height")
         setproperty QName(PackageNamespace(""),"height")
         getlex QName(PackageNamespace(""),"target")
         getproperty QName(PackageNamespace(""),"errorString")
         pushnull
         equals
         not
         dup
         iffalse ofs0046
         pop
         getlex QName(PackageNamespace(""),"target")
         getproperty QName(PackageNamespace(""),"errorString")
         pushstring ""
         equals
         not
         ofs0046:
         iffalse ofs005e
         getlex QName(PrivateNamespace(null,"10"),"glowFilter")
         getlex QName(PackageNamespace(""),"target")
         pushstring "errorColor"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         setproperty QName(PackageNamespace(""),"color")
         jump ofs006e
         ofs005e:
         getlex QName(PrivateNamespace(null,"10"),"glowFilter")
         getlex QName(PackageNamespace(""),"target")
         pushstring "focusColor"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         setproperty QName(PackageNamespace(""),"color")
         ofs006e:
         getlex QName(PrivateNamespace(null,"10"),"glowFilter")
         getlex QName(PrivateNamespace(null,"10"),"glowFilter")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.skins.spark:FocusSkin"),"borderWeight")
         getlocal0
         getproperty QName(PrivateNamespace(null,"10"),"BLUR_MULTIPLIER")
         multiply
         dup
         setlocal1
         setproperty QName(PackageNamespace(""),"blurY")
         getlocal1
         kill 1
         setproperty QName(PackageNamespace(""),"blurX")
         getlex QName(PrivateNamespace(null,"10"),"glowFilter")
         getlex QName(PackageNamespace(""),"target")
         pushstring "focusAlpha"
         callproperty QName(PackageNamespace(""),"getStyle"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"10"),"ALPHA_MULTIPLIER")
         multiply
         setproperty QName(PackageNamespace(""),"alpha")
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         getproperty QName(PackageNamespace(""),"bitmapData")
         getlex QName(ProtectedNamespace("spark.skins.spark:HighlightBitmapCaptureSkin"),"bitmap")
         getproperty QName(PackageNamespace(""),"bitmapData")
         getlex QName(PrivateNamespace(null,"10"),"rect")
         getlex QName(PrivateNamespace(null,"10"),"filterPt")
         getlex QName(PrivateNamespace(null,"10"),"glowFilter")
         callpropvoid QName(PackageNamespace(""),"applyFilter"), 4
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}

method
name null
returns null

body
maxstack 2
localcount 1
initscopedepth 1
maxscopedepth 11

code
getlocal0
pushscope
findpropstrict Multiname("FocusSkin",[PackageNamespace("spark.skins.spark")])
getlex QName(PackageNamespace(""),"Object")
pushscope
getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
pushscope
getlex QName(PackageNamespace("flash.display"),"DisplayObject")
pushscope
getlex QName(PackageNamespace("flash.display"),"InteractiveObject")
pushscope
getlex QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
pushscope
getlex QName(PackageNamespace("flash.display"),"Sprite")
pushscope
getlex QName(PackageNamespace("mx.core"),"FlexSprite")
pushscope
getlex QName(PackageNamespace("mx.core"),"UIComponent")
pushscope
getlex QName(PackageNamespace("spark.skins.spark"),"HighlightBitmapCaptureSkin")
pushscope
getlex QName(PackageNamespace("spark.skins.spark"),"HighlightBitmapCaptureSkin")
newclass 41
popscope
popscope
popscope
popscope
popscope
popscope
popscope
popscope
popscope
initproperty QName(PackageNamespace("spark.skins.spark"),"FocusSkin")
returnvoid
end ; code
end ; body
end ; method

