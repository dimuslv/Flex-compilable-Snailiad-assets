package spark.primitives.supportClasses
{
   import flash.display.BitmapData;
   import flash.display.BlendMode;
   import flash.display.DisplayObject;
   import flash.display.DisplayObjectContainer;
   import flash.display.Shape;
   import flash.display.Sprite;
   import flash.events.Event;
   import flash.events.EventDispatcher;
   import flash.events.IEventDispatcher;
   import flash.geom.ColorTransform;
   import flash.geom.Matrix;
   import flash.geom.Matrix3D;
   import flash.geom.Point;
   import flash.geom.Rectangle;
   import flash.geom.Transform;
   import flash.geom.Vector3D;
   import mx.core.AdvancedLayoutFeatures;
   import mx.core.DesignLayer;
   import mx.core.IInvalidating;
   import mx.core.ILayoutDirectionElement;
   import mx.core.ILayoutElement;
   import mx.core.IMXMLObject;
   import mx.core.IUIComponent;
   import mx.core.IVisualElement;
   import mx.core.LayoutDirection;
   import mx.core.UIComponent;
   import mx.core.UIComponentGlobals;
   import mx.core.mx_internal;
   import mx.events.FlexEvent;
   import mx.events.PropertyChangeEvent;
   import mx.filters.BaseFilter;
   import mx.filters.IBitmapFilter;
   import mx.geom.Transform;
   import mx.geom.TransformOffsets;
   import mx.graphics.shaderClasses.ColorBurnShader;
   import mx.graphics.shaderClasses.ColorDodgeShader;
   import mx.graphics.shaderClasses.ColorShader;
   import mx.graphics.shaderClasses.ExclusionShader;
   import mx.graphics.shaderClasses.HueShader;
   import mx.graphics.shaderClasses.LuminosityShader;
   import mx.graphics.shaderClasses.SaturationShader;
   import mx.graphics.shaderClasses.SoftLightShader;
   import mx.managers.ILayoutManagerClient;
   import mx.utils.MatrixUtil;
   import spark.components.Group;
   import spark.components.supportClasses.InvalidatingSprite;
   import spark.core.DisplayObjectSharingMode;
   import spark.core.IGraphicElement;
   import spark.utils.MaskUtil;
   
   use namespace mx_internal;
   
   public class GraphicElement extends EventDispatcher implements IGraphicElement, IInvalidating, ILayoutElement, IVisualElement, IMXMLObject
   {
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      private static const DEFAULT_MAX_WIDTH:Number = 10000;
      
      private static const DEFAULT_MAX_HEIGHT:Number = 10000;
      
      private static const DEFAULT_MIN_WIDTH:Number = 0;
      
      private static const DEFAULT_MIN_HEIGHT:Number = 0;
      
      mx_internal static var _strokeExtents:Rectangle;
      
      method
      name null
      returns null
      
      body
      maxstack 2
      localcount 1
      initscopedepth 4
      maxscopedepth 5
      
      code
      getlocal0
      pushscope
      findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
      pushstring "4.1.0.16076"
      initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
      findproperty QName(PrivateNamespace(null,"64"),"DEFAULT_MAX_WIDTH")
      pushshort 10000
      initproperty QName(PrivateNamespace(null,"64"),"DEFAULT_MAX_WIDTH")
      findproperty QName(PrivateNamespace(null,"64"),"DEFAULT_MAX_HEIGHT")
      pushshort 10000
      initproperty QName(PrivateNamespace(null,"64"),"DEFAULT_MAX_HEIGHT")
      findproperty QName(PrivateNamespace(null,"64"),"DEFAULT_MIN_WIDTH")
      pushbyte 0
      initproperty QName(PrivateNamespace(null,"64"),"DEFAULT_MIN_WIDTH")
      findproperty QName(PrivateNamespace(null,"64"),"DEFAULT_MIN_HEIGHT")
      pushbyte 0
      initproperty QName(PrivateNamespace(null,"64"),"DEFAULT_MIN_HEIGHT")
      findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
      findpropstrict QName(PackageNamespace("flash.geom"),"Rectangle")
      constructprop QName(PackageNamespace("flash.geom"),"Rectangle"), 0
      setproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
      returnvoid
      end ; code
      end ; body
      end ; method
      
      private var displayObjectChanged:Boolean;
      
      private var _colorTransform:ColorTransform;
      
      private var colorTransformChanged:Boolean;
      
      private var _drawnDisplayObject:InvalidatingSprite;
      
      mx_internal var invalidatePropertiesFlag:Boolean = false;
      
      mx_internal var invalidateSizeFlag:Boolean = false;
      
      mx_internal var invalidateDisplayListFlag:Boolean = false;
      
      protected var layoutFeatures:AdvancedLayoutFeatures;
      
      private var _x:Number = 0;
      
      private var _y:Number = 0;
      
      private var _alpha:Number = 1;
      
      private var _effectiveAlpha:Number = 1;
      
      private var alphaChanged:Boolean = false;
      
      private var _baseline:Object;
      
      private var _blendMode:String = "auto";
      
      private var blendModeChanged:Boolean;
      
      private var blendShaderChanged:Boolean;
      
      private var blendModeExplicitlySet:Boolean = false;
      
      private var _bottom:Object;
      
      private var _owner:DisplayObjectContainer;
      
      private var _designLayer:DesignLayer;
      
      private var _parent:DisplayObjectContainer;
      
      private var _explicitHeight:Number;
      
      private var _explicitWidth:Number;
      
      private var _filters:Array;
      
      private var filtersChanged:Boolean;
      
      private var _clonedFilters:Array;
      
      mx_internal var _height:Number = 0;
      
      private var _horizontalCenter:Object;
      
      private var _id:String;
      
      private var _left:Object;
      
      private var _mask:DisplayObject;
      
      private var maskChanged:Boolean;
      
      private var _maskType:String = "clip";
      
      private var maskTypeChanged:Boolean;
      
      private var _luminosityInvert:Boolean = false;
      
      private var luminositySettingsChanged:Boolean;
      
      private var _luminosityClip:Boolean = false;
      
      private var _maxHeight:Number;
      
      mx_internal var _maxWidth:Number;
      
      private var _measuredHeight:Number = 0;
      
      private var _measuredWidth:Number = 0;
      
      private var _measuredX:Number = 0;
      
      private var _measuredY:Number = 0;
      
      private var _minHeight:Number;
      
      private var _minWidth:Number;
      
      private var _percentHeight:Number;
      
      private var _percentWidth:Number;
      
      private var _right:Object;
      
      private var _top:Object;
      
      private var _transform:flash.geom.Transform;
      
      private var _verticalCenter:Object;
      
      mx_internal var _width:Number = 0;
      
      private var _visible:Boolean = true;
      
      protected var _effectiveVisibility:Boolean = true;
      
      private var visibleChanged:Boolean;
      
      private var _displayObject:DisplayObject;
      
      private var _includeInLayout:Boolean = true;
      
      private var _displayObjectSharingMode:String;
      
      private var _layoutDirection:String = null;
      
      private var _alwaysCreateDisplayObject:Boolean;
      
      public function GraphicElement()
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         newarray 0
         initproperty QName(PrivateNamespace(null,"64"),"_filters")
         getlocal0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get postLayoutTransformOffsets() : TransformOffsets
      {
         trait getter QName(PackageNamespace(""),"postLayoutTransformOffsets")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("mx.geom"),"TransformOffsets")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushnull
         coerce QName(PackageNamespace("mx.geom"),"TransformOffsets")
         jump ofs001b
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         coerce QName(PackageNamespace("mx.geom"),"TransformOffsets")
         ofs001b:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set postLayoutTransformOffsets(param1:TransformOffsets) : void
      {
         trait setter QName(PackageNamespace(""),"postLayoutTransformOffsets")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.geom"),"TransformOffsets")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         pushnull
         ifeq ofs000d
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         ofs000d:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         pushnull
         ifeq ofs002d
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         getlex QName(PackageNamespace("flash.events"),"Event")
         getproperty QName(PackageNamespace(""),"CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"transformOffsetsChangedHandler")
         callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
         ofs002d:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         pushnull
         ifeq ofs0055
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         getlex QName(PackageNamespace("flash.events"),"Event")
         getproperty QName(PackageNamespace(""),"CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"transformOffsetsChangedHandler")
         callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
         ofs0055:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function allocateLayoutFeatures() : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs000c
         returnvoid
         ofs000c:
         getlocal0
         findpropstrict QName(PackageNamespace("mx.core"),"AdvancedLayoutFeatures")
         constructprop QName(PackageNamespace("mx.core"),"AdvancedLayoutFeatures"), 0
         initproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_x")
         setproperty QName(PackageNamespace(""),"layoutX")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_y")
         setproperty QName(PackageNamespace(""),"layoutY")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         setproperty QName(PackageNamespace(""),"layoutWidth")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function invalidateTransform(param1:Boolean = true, param2:Boolean = true) : void
      {
         trait method QName(PrivateNamespace(null,"64"),"invalidateTransform")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         optional True()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         iffalse ofs000c
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs000c:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs001d
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushtrue
         setproperty QName(PackageNamespace(""),"updatePending")
         ofs001d:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         ifeq ofs0034
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         jump ofs0039
         ofs0034:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         ofs0039:
         getlocal2
         iffalse ofs0043
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs0043:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function transformOffsetsChangedHandler(param1:Event) : void
      {
         trait method QName(PrivateNamespace(null,"64"),"transformOffsetsChangedHandler")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.events"),"Event")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get alpha() : Number
      {
         trait getter QName(PackageNamespace(""),"alpha")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_alpha")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set alpha(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"alpha")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_alpha")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_alpha")
         getlocal0
         getproperty QName(PackageNamespace(""),"designLayer")
         iffalse ofs002a
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"designLayer")
         getproperty QName(PackageNamespace(""),"effectiveAlpha")
         multiply
         convert_d
         setlocal1
         ofs002a:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_blendMode")
         pushstring "auto"
         ifne ofs0094
         getlocal1
         pushbyte 0
         greaterthan
         dup
         iffalse ofs0043
         pop
         getlocal1
         pushbyte 1
         lessthan
         ofs0043:
         dup
         iffalse ofs005d
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_effectiveAlpha")
         pushbyte 0
         equals
         dup
         iftrue ofs005d
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_effectiveAlpha")
         pushbyte 1
         equals
         ofs005d:
         dup
         iftrue ofs008b
         pop
         getlocal1
         pushbyte 0
         equals
         dup
         iftrue ofs0071
         pop
         getlocal1
         pushbyte 1
         equals
         ofs0071:
         dup
         iffalse ofs008b
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_effectiveAlpha")
         pushbyte 0
         greaterthan
         dup
         iffalse ofs008b
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_effectiveAlpha")
         pushbyte 1
         lessthan
         ofs008b:
         iffalse ofs0094
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"blendModeChanged")
         ofs0094:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_effectiveAlpha")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_transform")
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal3
         getlocal3
         iffalse ofs00af
         getlocal3
         pushfalse
         setproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyColorTransformAlpha")
         ofs00af:
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         ifeq ofs00bd
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs00bd:
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"alphaChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get baseline() : Object
      {
         trait getter QName(PackageNamespace(""),"baseline")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_baseline")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set baseline(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"baseline")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_baseline")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_baseline")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get baselinePosition() : Number
      {
         trait getter QName(PackageNamespace(""),"baselinePosition")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get blendMode() : String
      {
         trait getter QName(PackageNamespace(""),"blendMode")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_blendMode")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set blendMode(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"blendMode")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_blendMode")
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_blendMode")
         coerce_s
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_blendMode")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"blendModeChanged")
         getlocal0
         getlocal1
         callproperty QName(PrivateNamespace(null,"64"),"isAIMBlendMode"), 1
         iffalse ofs002b
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"blendShaderChanged")
         ofs002b:
         getlocal2
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         dup
         iftrue ofs0041
         pop
         getlocal1
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         ofs0041:
         dup
         iffalse ofs005e
         pop
         getlocal2
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         dup
         iffalse ofs005d
         pop
         getlocal1
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         ofs005d:
         not
         ofs005e:
         iffalse ofs0067
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs0067:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get bottom() : Object
      {
         trait getter QName(PackageNamespace(""),"bottom")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_bottom")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set bottom(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"bottom")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_bottom")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_bottom")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get owner() : DisplayObjectContainer
      {
         trait getter QName(PackageNamespace(""),"owner")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_owner")
         iffalse ofs0014
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_owner")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         jump ofs001a
         ofs0014:
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set owner(param1:DisplayObjectContainer) : void
      {
         trait setter QName(PackageNamespace(""),"owner")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_owner")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get designLayer() : DesignLayer
      {
         trait getter QName(PackageNamespace(""),"designLayer")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("mx.core"),"DesignLayer")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_designLayer")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set designLayer(param1:DesignLayer) : void
      {
         trait setter QName(PackageNamespace(""),"designLayer")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.core"),"DesignLayer")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_designLayer")
         iffalse ofs001a
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_designLayer")
         pushstring "layerPropertyChange"
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layer_PropertyChange")
         pushfalse
         callpropvoid QName(PackageNamespace(""),"removeEventListener"), 3
         ofs001a:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_designLayer")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_designLayer")
         iffalse ofs003a
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_designLayer")
         pushstring "layerPropertyChange"
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layer_PropertyChange")
         pushfalse
         pushbyte 0
         pushtrue
         callpropvoid QName(PackageNamespace(""),"addEventListener"), 5
         ofs003a:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_designLayer")
         iffalse ofs0054
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_alpha")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_designLayer")
         getproperty QName(PackageNamespace(""),"effectiveAlpha")
         multiply
         convert_d
         jump ofs0059
         ofs0054:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_alpha")
         convert_d
         ofs0059:
         initproperty QName(PrivateNamespace(null,"64"),"_effectiveAlpha")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_designLayer")
         iffalse ofs007c
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_visible")
         convert_b
         dup
         iffalse ofs0078
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_designLayer")
         getproperty QName(PackageNamespace(""),"effectiveVisibility")
         convert_b
         ofs0078:
         jump ofs0081
         ofs007c:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_visible")
         convert_b
         ofs0081:
         initproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"alphaChanged")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"visibleChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get parent() : DisplayObjectContainer
      {
         trait getter QName(PackageNamespace(""),"parent")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_parent")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function parentChanged(param1:Group) : void
      {
         trait method QName(PackageNamespace(""),"parentChanged")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.components"),"Group")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_parent")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateLayoutDirection"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_explicitHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_explicitHeight")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs001f
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"percentHeight")
         ofs001f:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_explicitHeight")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMaxHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMaxHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitMaxHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitMaxHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"maxHeight")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMaxWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMaxWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitMaxWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitMaxWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"maxWidth")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMinHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMinHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitMinHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitMinHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"minHeight")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMinWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMinWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitMinWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitMinWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"minWidth")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_explicitWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_explicitWidth")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs001f
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"percentWidth")
         ofs001f:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_explicitWidth")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get filters() : Array
      {
         trait getter QName(PackageNamespace(""),"filters")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Array")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_filters")
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"slice"), 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set filters(param1:Array) : void
      {
         trait setter QName(PackageNamespace(""),"filters")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Array")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 7
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.events"),"IEventDispatcher")
         setlocal 5
         pushbyte 0
         setlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_filters")
         iffalse ofs001e
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_filters")
         getproperty QName(PackageNamespace(""),"length")
         convert_i
         jump ofs0020
         ofs001e:
         pushbyte 0
         ofs0020:
         convert_i
         setlocal3
         getlocal1
         iffalse ofs0030
         getlocal1
         getproperty QName(PackageNamespace(""),"length")
         convert_i
         jump ofs0032
         ofs0030:
         pushbyte 0
         ofs0032:
         convert_i
         setlocal 4
         getlocal3
         pushbyte 0
         equals
         dup
         iffalse ofs0044
         pop
         getlocal 4
         pushbyte 0
         equals
         ofs0044:
         iffalse ofs0049
         returnvoid
         ofs0049:
         pushbyte 0
         setlocal2
         jump ofs0077
         ofs0050:
         label
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_filters")
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"64"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"426"),PackageNamespace("spark.primitives.supportClasses"),PackageInternalNs("spark.primitives.supportClasses"),StaticProtectedNs("spark.primitives.supportClasses:GraphicElement"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace("flash.events"),"IEventDispatcher")
         astypelate
         coerce QName(PackageNamespace("flash.events"),"IEventDispatcher")
         dup
         setlocal 5
         iffalse ofs0075
         getlocal 5
         getlex QName(PackageNamespace("mx.filters"),"BaseFilter")
         getproperty QName(PackageNamespace(""),"CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"filterChangedHandler")
         callpropvoid QName(Namespace("flash.events:IEventDispatcher"),"removeEventListener"), 2
         ofs0075:
         inclocal_i 2
         ofs0077:
         getlocal2
         getlocal3
         iflt ofs0050
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal 6
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_filters")
         getlocal 6
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         ifeq ofs0098
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs0098:
         getlocal0
         newarray 0
         initproperty QName(PrivateNamespace(null,"64"),"_clonedFilters")
         pushbyte 0
         setlocal2
         jump ofs00ff
         ofs00a5:
         label
         getlocal1
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"64"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"426"),PackageNamespace("spark.primitives.supportClasses"),PackageInternalNs("spark.primitives.supportClasses"),StaticProtectedNs("spark.primitives.supportClasses:GraphicElement"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace("mx.filters"),"IBitmapFilter")
         istypelate
         iffalse ofs00f0
         getlocal1
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"64"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"426"),PackageNamespace("spark.primitives.supportClasses"),PackageInternalNs("spark.primitives.supportClasses"),StaticProtectedNs("spark.primitives.supportClasses:GraphicElement"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace("flash.events"),"IEventDispatcher")
         astypelate
         coerce QName(PackageNamespace("flash.events"),"IEventDispatcher")
         dup
         setlocal 5
         iffalse ofs00d4
         getlocal 5
         getlex QName(PackageNamespace("mx.filters"),"BaseFilter")
         getproperty QName(PackageNamespace(""),"CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"filterChangedHandler")
         callpropvoid QName(Namespace("flash.events:IEventDispatcher"),"addEventListener"), 2
         ofs00d4:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_clonedFilters")
         findpropstrict QName(PackageNamespace("mx.filters"),"IBitmapFilter")
         getlocal1
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"64"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"426"),PackageNamespace("spark.primitives.supportClasses"),PackageInternalNs("spark.primitives.supportClasses"),StaticProtectedNs("spark.primitives.supportClasses:GraphicElement"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         callproperty QName(PackageNamespace("mx.filters"),"IBitmapFilter"), 1
         callproperty QName(Namespace("mx.filters:IBitmapFilter"),"clone"), 0
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         jump ofs00fd
         ofs00f0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_clonedFilters")
         getlocal1
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"64"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"426"),PackageNamespace("spark.primitives.supportClasses"),PackageInternalNs("spark.primitives.supportClasses"),StaticProtectedNs("spark.primitives.supportClasses:GraphicElement"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         ofs00fd:
         inclocal_i 2
         ofs00ff:
         getlocal2
         getlocal 4
         iflt ofs00a5
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"filtersChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get height() : Number
      {
         trait getter QName(PackageNamespace(""),"height")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set height(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"height")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"explicitHeight")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal1
         ifne ofs0011
         returnvoid
         ofs0011:
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         convert_d
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal0
         pushstring "height"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get horizontalCenter() : Object
      {
         trait getter QName(PackageNamespace(""),"horizontalCenter")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_horizontalCenter")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set horizontalCenter(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"horizontalCenter")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_horizontalCenter")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_horizontalCenter")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get id() : String
      {
         trait getter QName(PackageNamespace(""),"id")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_id")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set id(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"id")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_id")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get left() : Object
      {
         trait getter QName(PackageNamespace(""),"left")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_left")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set left(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"left")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_left")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_left")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get mask() : DisplayObject
      {
         trait getter QName(PackageNamespace(""),"mask")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set mask(param1:DisplayObject) : void
      {
         trait setter QName(PackageNamespace(""),"mask")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         getlex QName(PackageNamespace("mx.core"),"UIComponent")
         astypelate
         coerce QName(PackageNamespace("mx.core"),"UIComponent")
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_mask")
         getlocal2
         convert_b
         dup
         iffalse ofs0032
         pop
         getlocal2
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$parent")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         strictequals
         ofs0032:
         iffalse ofs0058
         getlocal2
         getproperty QName(PackageNamespace(""),"parent")
         getlex QName(PackageNamespace("mx.core"),"UIComponent")
         istypelate
         iffalse ofs004f
         findpropstrict QName(PackageNamespace("mx.core"),"UIComponent")
         getlocal2
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"UIComponent"), 1
         getlocal2
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"childRemoved"), 1
         ofs004f:
         getlocal2
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$parent")
         getlocal2
         callpropvoid QName(PackageNamespace(""),"removeChild"), 1
         ofs0058:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         not
         dup
         iftrue ofs006b
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         getproperty QName(PackageNamespace(""),"parent")
         convert_b
         ofs006b:
         iffalse ofs00a6
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         iffalse ofs007f
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         pushnull
         setproperty QName(PackageNamespace(""),"mask")
         ofs007f:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_drawnDisplayObject")
         iffalse ofs00a6
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_drawnDisplayObject")
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs00a1
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_drawnDisplayObject")
         getproperty QName(PackageNamespace(""),"parent")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_drawnDisplayObject")
         callpropvoid QName(PackageNamespace(""),"removeChild"), 1
         ofs00a1:
         getlocal0
         pushnull
         initproperty QName(PrivateNamespace(null,"64"),"_drawnDisplayObject")
         ofs00a6:
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"maskChanged")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"maskTypeChanged")
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         ifeq ofs00be
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs00be:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get maskType() : String
      {
         trait getter QName(PackageNamespace(""),"maskType")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_maskType")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set maskType(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"maskType")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_maskType")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_maskType")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"maskTypeChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get luminosityInvert() : Boolean
      {
         trait getter QName(PackageNamespace(""),"luminosityInvert")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_luminosityInvert")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set luminosityInvert(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"luminosityInvert")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_luminosityInvert")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_luminosityInvert")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"luminositySettingsChanged")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get luminosityClip() : Boolean
      {
         trait getter QName(PackageNamespace(""),"luminosityClip")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_luminosityClip")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set luminosityClip(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"luminosityClip")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_luminosityClip")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_luminosityClip")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"luminositySettingsChanged")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get maxHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"maxHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_maxHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs001a
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_maxHeight")
         convert_d
         jump ofs001e
         ofs001a:
         getlex QName(PrivateNamespace(null,"64"),"DEFAULT_MAX_HEIGHT")
         convert_d
         ofs001e:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set maxHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"maxHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_maxHeight")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_maxHeight")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get maxWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"maxWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_maxWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs001a
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_maxWidth")
         convert_d
         jump ofs001e
         ofs001a:
         getlex QName(PrivateNamespace(null,"64"),"DEFAULT_MAX_WIDTH")
         convert_d
         ofs001e:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set maxWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"maxWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_maxWidth")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_maxWidth")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_measuredHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set measuredHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"measuredHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_measuredHeight")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_measuredWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set measuredWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"measuredWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_measuredWidth")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredX() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_measuredX")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set measuredX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"measuredX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_measuredX")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredY() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_measuredY")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set measuredY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"measuredY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_measuredY")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get minHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"minHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_minHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs001a
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_minHeight")
         convert_d
         jump ofs001e
         ofs001a:
         getlex QName(PrivateNamespace(null,"64"),"DEFAULT_MIN_HEIGHT")
         convert_d
         ofs001e:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set minHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"minHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_minHeight")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_minHeight")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get minWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"minWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_minWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs001a
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_minWidth")
         convert_d
         jump ofs001e
         ofs001a:
         getlex QName(PrivateNamespace(null,"64"),"DEFAULT_MIN_WIDTH")
         convert_d
         ofs001e:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set minWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"minWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_minWidth")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_minWidth")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get percentHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"percentHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_percentHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set percentHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"percentHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_percentHeight")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs001f
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"explicitHeight")
         ofs001f:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_percentHeight")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get percentWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"percentWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_percentWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set percentWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"percentWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_percentWidth")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs001f
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"explicitWidth")
         ofs001f:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_percentWidth")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get right() : Object
      {
         trait getter QName(PackageNamespace(""),"right")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_right")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set right(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"right")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_right")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_right")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get rotationX() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 0
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationX")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set rotationX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"rotationX")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutRotationX")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get rotationY() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 0
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationY")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set rotationY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"rotationY")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutRotationY")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get rotationZ() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationZ")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 0
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationZ")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set rotationZ(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationZ")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"rotationZ")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutRotationZ")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get rotation() : Number
      {
         trait getter QName(PackageNamespace(""),"rotation")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 0
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationZ")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set rotation(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotation")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"rotationZ")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleX() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 1
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleX")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleX")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutScaleX")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleY() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 1
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleY")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleY")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutScaleY")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleZ() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleZ")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 1
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleZ")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleZ(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleZ")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleZ")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutScaleZ")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get top() : Object
      {
         trait getter QName(PackageNamespace(""),"top")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_top")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set top(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"top")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_top")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_top")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get transform() : flash.geom.Transform
      {
         trait getter QName(PackageNamespace(""),"transform")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.geom"),"Transform")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_transform")
         iftrue ofs0016
         getlocal0
         findpropstrict QName(PackageNamespace("mx.geom"),"Transform")
         constructprop QName(PackageNamespace("mx.geom"),"Transform"), 0
         callpropvoid QName(PrivateNamespace(null,"64"),"setTransform"), 1
         ofs0016:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_transform")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set transform(param1:flash.geom.Transform) : void
      {
         trait setter QName(PackageNamespace(""),"transform")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Transform")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 7
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         convert_b
         dup
         iffalse ofs000f
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"matrix")
         convert_b
         ofs000f:
         iffalse ofs0021
         getlocal1
         getproperty QName(PackageNamespace(""),"matrix")
         callproperty QName(PackageNamespace(""),"clone"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         jump ofs0024
         ofs0021:
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         ofs0024:
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal2
         getlocal1
         convert_b
         dup
         iffalse ofs0034
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"matrix3D")
         convert_b
         ofs0034:
         iffalse ofs0046
         getlocal1
         getproperty QName(PackageNamespace(""),"matrix3D")
         callproperty QName(PackageNamespace(""),"clone"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         jump ofs0049
         ofs0046:
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         ofs0049:
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal3
         getlocal1
         iffalse ofs005b
         getlocal1
         getproperty QName(PackageNamespace(""),"colorTransform")
         coerce QName(PackageNamespace("flash.geom"),"ColorTransform")
         jump ofs005e
         ofs005b:
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"ColorTransform")
         ofs005e:
         coerce QName(PackageNamespace("flash.geom"),"ColorTransform")
         setlocal 4
         getlocal1
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         dup
         setlocal 5
         iffalse ofs008b
         getlocal 5
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyMatrix")
         iftrue ofs007e
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal2
         ofs007e:
         getlocal 5
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyMatrix3D")
         iftrue ofs008b
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal3
         ofs008b:
         getlocal0
         getlocal1
         callpropvoid QName(PrivateNamespace(null,"64"),"setTransform"), 1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal 6
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_transform")
         iffalse ofs00c5
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal2
         pushnull
         ifeq ofs00b7
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal2
         setproperty QName(PackageNamespace(""),"layoutMatrix")
         jump ofs00c5
         ofs00b7:
         getlocal3
         pushnull
         ifeq ofs00c5
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal3
         setproperty QName(PackageNamespace(""),"layoutMatrix3D")
         ofs00c5:
         getlocal0
         getlocal 4
         getlocal 5
         convert_b
         dup
         iffalse ofs00d7
         pop
         getlocal 5
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyColorTransformAlpha")
         convert_b
         ofs00d7:
         callpropvoid QName(PrivateNamespace(null,"64"),"applyColorTransform"), 2
         getlocal0
         getlocal 6
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function setTransform(param1:flash.geom.Transform) : void
      {
         trait method QName(PrivateNamespace(null,"64"),"setTransform")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Transform")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_transform")
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal2
         getlocal2
         iffalse ofs0018
         getlocal2
         pushnull
         setproperty QName(PackageNamespace(""),"target")
         ofs0018:
         getlocal1
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal3
         getlocal3
         iffalse ofs002b
         getlocal3
         getlocal0
         setproperty QName(PackageNamespace(""),"target")
         ofs002b:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_transform")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setColorTransform(param1:ColorTransform) : void
      {
         trait method QName(PackageNamespace(""),"setColorTransform")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"ColorTransform")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         pushtrue
         callpropvoid QName(PrivateNamespace(null,"64"),"applyColorTransform"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function applyColorTransform(param1:ColorTransform, param2:Boolean) : void
      {
         trait method QName(PrivateNamespace(null,"64"),"applyColorTransform")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"ColorTransform")
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 10
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal3
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_colorTransform")
         getlocal1
         ifeq ofs0095
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlocal0
         findpropstrict QName(PackageNamespace("flash.geom"),"ColorTransform")
         getlocal1
         getproperty QName(PackageNamespace(""),"redMultiplier")
         getlocal1
         getproperty QName(PackageNamespace(""),"greenMultiplier")
         getlocal1
         getproperty QName(PackageNamespace(""),"blueMultiplier")
         getlocal1
         getproperty QName(PackageNamespace(""),"alphaMultiplier")
         getlocal1
         getproperty QName(PackageNamespace(""),"redOffset")
         getlocal1
         getproperty QName(PackageNamespace(""),"greenOffset")
         getlocal1
         getproperty QName(PackageNamespace(""),"blueOffset")
         getlocal1
         getproperty QName(PackageNamespace(""),"alphaOffset")
         constructprop QName(PackageNamespace("flash.geom"),"ColorTransform"), 8
         initproperty QName(PrivateNamespace(null,"64"),"_colorTransform")
         getlocal2
         iffalse ofs0051
         getlocal0
         getlocal1
         getproperty QName(PackageNamespace(""),"alphaMultiplier")
         initproperty QName(PrivateNamespace(null,"64"),"_alpha")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_alpha")
         initproperty QName(PrivateNamespace(null,"64"),"_effectiveAlpha")
         ofs0051:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         convert_b
         dup
         iffalse ofs0067
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         equals
         ofs0067:
         iffalse ofs007d
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_colorTransform")
         setproperty QName(PackageNamespace(""),"colorTransform")
         jump ofs0095
         ofs007d:
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"colorTransformChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         ifeq ofs0095
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs0095:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function isAIMBlendMode(param1:String) : Boolean
      {
         trait method QName(PrivateNamespace(null,"64"),"isAIMBlendMode")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         pushstring "colordodge"
         equals
         dup
         iftrue ofs0012
         pop
         getlocal1
         pushstring "colorburn"
         equals
         ofs0012:
         dup
         iftrue ofs001d
         pop
         getlocal1
         pushstring "exclusion"
         equals
         ofs001d:
         dup
         iftrue ofs0028
         pop
         getlocal1
         pushstring "softlight"
         equals
         ofs0028:
         dup
         iftrue ofs0033
         pop
         getlocal1
         pushstring "hue"
         equals
         ofs0033:
         dup
         iftrue ofs003e
         pop
         getlocal1
         pushstring "saturation"
         equals
         ofs003e:
         dup
         iftrue ofs0049
         pop
         getlocal1
         pushstring "color"
         equals
         ofs0049:
         dup
         iftrue ofs0054
         pop
         getlocal1
         pushstring "luminosity"
         equals
         ofs0054:
         iffalse ofs005a
         pushtrue
         returnvalue
         ofs005a:
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function transformAround(param1:Vector3D, param2:Vector3D = null, param3:Vector3D = null, param4:Vector3D = null, param5:Vector3D = null, param6:Vector3D = null, param7:Vector3D = null, param8:Boolean = true) : void
      {
         trait method QName(PackageNamespace(""),"transformAround")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace(""),"Boolean")
         optional Null()
         optional Null()
         optional Null()
         optional Null()
         optional Null()
         optional Null()
         optional True()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 8
         localcount 13
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal 9
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutX")
         convert_d
         setlocal 10
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutY")
         convert_d
         setlocal 11
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutZ")
         convert_d
         setlocal 12
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         getlocal2
         getlocal3
         getlocal 4
         getlocal 5
         getlocal 6
         getlocal 7
         callpropvoid QName(PackageNamespace(""),"transformAround"), 7
         getlocal0
         getlocal 9
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         getlocal 8
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 2
         getlocal 10
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutX")
         ifeq ofs006c
         getlocal0
         pushstring "x"
         getlocal 10
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutX")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs006c:
         getlocal 11
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutY")
         ifeq ofs0089
         getlocal0
         pushstring "y"
         getlocal 11
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutY")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs0089:
         getlocal 12
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutZ")
         ifeq ofs00a7
         getlocal0
         pushstring "z"
         getlocal 12
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutZ")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs00a7:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function transformPointToParent(param1:Vector3D, param2:Vector3D, param3:Vector3D) : void
      {
         trait method QName(PackageNamespace(""),"transformPointToParent")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 5
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0020
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushtrue
         getlocal1
         getlocal2
         getlocal3
         callpropvoid QName(PackageNamespace(""),"transformPointToParent"), 4
         jump ofs0090
         ofs0020:
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 0
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlocal1
         iffalse ofs0040
         getlocal 4
         getlocal1
         getproperty QName(PackageNamespace(""),"x")
         setproperty QName(PackageNamespace(""),"x")
         getlocal 4
         getlocal1
         getproperty QName(PackageNamespace(""),"y")
         setproperty QName(PackageNamespace(""),"y")
         ofs0040:
         getlocal2
         pushnull
         ifeq ofs0068
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_x")
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_y")
         add
         setproperty QName(PackageNamespace(""),"y")
         getlocal2
         pushbyte 0
         setproperty QName(PackageNamespace(""),"z")
         ofs0068:
         getlocal3
         pushnull
         ifeq ofs0090
         getlocal3
         getlocal 4
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_x")
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal3
         getlocal 4
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_y")
         add
         setproperty QName(PackageNamespace(""),"y")
         getlocal3
         pushbyte 0
         setproperty QName(PackageNamespace(""),"z")
         ofs0090:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get transformX() : Number
      {
         trait getter QName(PackageNamespace(""),"transformX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 0
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"transformX")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set transformX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"transformX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"transformX")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"transformX")
         getlocal0
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get transformY() : Number
      {
         trait getter QName(PackageNamespace(""),"transformY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 0
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"transformY")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set transformY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"transformY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"transformY")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"transformY")
         getlocal0
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get transformZ() : Number
      {
         trait getter QName(PackageNamespace(""),"transformZ")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 0
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"transformZ")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set transformZ(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"transformZ")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"transformZ")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"transformZ")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get verticalCenter() : Object
      {
         trait getter QName(PackageNamespace(""),"verticalCenter")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_verticalCenter")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set verticalCenter(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"verticalCenter")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_verticalCenter")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_verticalCenter")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get width() : Number
      {
         trait getter QName(PackageNamespace(""),"width")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set width(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"width")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"explicitWidth")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal1
         ifne ofs0011
         returnvoid
         ofs0011:
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         convert_d
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         iffalse ofs0031
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutWidth")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 0
         ofs0031:
         getlocal0
         pushstring "width"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get depth() : Number
      {
         trait getter QName(PackageNamespace(""),"depth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 0
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"depth")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set depth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"depth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"depth")
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"depth")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_parent")
         getlex QName(PackageNamespace("mx.core"),"UIComponent")
         istypelate
         iffalse ofs0031
         findpropstrict QName(PackageNamespace("mx.core"),"UIComponent")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_parent")
         callproperty QName(PackageNamespace("mx.core"),"UIComponent"), 1
         callpropvoid QName(PackageNamespace(""),"invalidateLayering"), 0
         ofs0031:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get x() : Number
      {
         trait getter QName(PackageNamespace(""),"x")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0014
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_x")
         convert_d
         jump ofs001c
         ofs0014:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutX")
         convert_d
         ofs001c:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set x(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"x")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal2
         getlocal2
         getlocal1
         ifne ofs000f
         returnvoid
         ofs000f:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0024
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutX")
         jump ofs0029
         ofs0024:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_x")
         ofs0029:
         getlocal0
         pushstring "x"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         getlocal0
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get y() : Number
      {
         trait getter QName(PackageNamespace(""),"y")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0014
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_y")
         convert_d
         jump ofs001c
         ofs0014:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutY")
         convert_d
         ofs001c:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set y(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"y")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal2
         getlocal2
         getlocal1
         ifne ofs000f
         returnvoid
         ofs000f:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0024
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutY")
         jump ofs0029
         ofs0024:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_y")
         ofs0029:
         getlocal0
         pushstring "y"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         getlocal0
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get z() : Number
      {
         trait getter QName(PackageNamespace(""),"z")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0012
         pushbyte 0
         convert_d
         jump ofs001a
         ofs0012:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutZ")
         convert_d
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set z(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"z")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"z")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getproperty QName(PackageNamespace(""),"z")
         convert_d
         setlocal2
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutZ")
         getlocal0
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         getlocal0
         pushstring "z"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get visible() : Boolean
      {
         trait getter QName(PackageNamespace(""),"visible")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_visible")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set visible(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"visible")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_visible")
         getlocal0
         getproperty QName(PackageNamespace(""),"designLayer")
         convert_b
         dup
         iffalse ofs001a
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"designLayer")
         getproperty QName(PackageNamespace(""),"effectiveVisibility")
         not
         ofs001a:
         iffalse ofs0020
         pushfalse
         setlocal1
         ofs0020:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         getlocal1
         ifne ofs002a
         returnvoid
         ofs002a:
         getlocal0
         getlocal1
         initproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"visibleChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get displayObject() : DisplayObject
      {
         trait getter QName(PackageNamespace(""),"displayObject")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_displayObject")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function setDisplayObject(param1:DisplayObject) : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"setDisplayObject")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_displayObject")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_displayObject")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal2
         getlocal2
         convert_b
         dup
         iffalse ofs0026
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         equals
         ofs0026:
         iffalse ofs0032
         getlocal2
         getproperty QName(PackageNamespace(""),"transform")
         pushnull
         setproperty QName(PackageNamespace(""),"matrix3D")
         ofs0032:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_displayObject")
         getlocal0
         pushstring "displayObject"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"displayObjectChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function get drawX() : Number
      {
         trait getter QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         ifne ofs0013
         pushbyte 0
         returnvalue
         ofs0013:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         not
         dup
         iffalse ofs002a
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         pushnull
         equals
         not
         ofs002a:
         iffalse ofs003e
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         ofs003e:
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function get drawY() : Number
      {
         trait getter QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         ifne ofs0013
         pushbyte 0
         returnvalue
         ofs0013:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         not
         dup
         iffalse ofs002a
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         pushnull
         equals
         not
         ofs002a:
         iffalse ofs003e
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         ofs003e:
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function get hasComplexLayoutMatrix() : Boolean
      {
         trait getter QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         iffalse ofs0011
         pushfalse
         jump ofs0020
         ofs0011:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PackageNamespace(""),"isDeltaIdentity"), 1
         not
         ofs0020:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get includeInLayout() : Boolean
      {
         trait getter QName(PackageNamespace(""),"includeInLayout")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_includeInLayout")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set includeInLayout(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"includeInLayout")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_includeInLayout")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"_includeInLayout")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_includeInLayout")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function set displayObjectSharingMode(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"displayObjectSharingMode")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_displayObjectSharingMode")
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal1
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         not
         dup
         iftrue ofs0027
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         not
         ofs0027:
         iffalse ofs0035
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"displayObjectChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         ofs0035:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_displayObjectSharingMode")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get displayObjectSharingMode() : String
      {
         trait getter QName(PackageNamespace(""),"displayObjectSharingMode")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_displayObjectSharingMode")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get layoutDirection() : String
      {
         trait getter QName(PackageNamespace(""),"layoutDirection")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_layoutDirection")
         pushnull
         ifeq ofs0010
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_layoutDirection")
         returnvalue
         ofs0010:
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         getlex QName(PackageNamespace("mx.core"),"ILayoutDirectionElement")
         astypelate
         coerce QName(PackageNamespace("mx.core"),"ILayoutDirectionElement")
         setlocal1
         getlocal1
         iffalse ofs002a
         getlocal1
         getproperty QName(Namespace("mx.core:ILayoutDirectionElement"),"layoutDirection")
         coerce_s
         jump ofs0031
         ofs002a:
         getlex QName(PackageNamespace("mx.core"),"LayoutDirection")
         getproperty QName(PackageNamespace(""),"LTR")
         coerce_s
         ofs0031:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set layoutDirection(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"layoutDirection")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_layoutDirection")
         getlocal1
         ifne ofs000c
         returnvoid
         ofs000c:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_layoutDirection")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateLayoutDirection"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateLayoutDirection() : void
      {
         trait method QName(PackageNamespace(""),"invalidateLayoutDirection")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         getlex QName(PackageNamespace("mx.core"),"ILayoutDirectionElement")
         astypelate
         coerce QName(PackageNamespace("mx.core"),"ILayoutDirectionElement")
         setlocal1
         getlocal1
         iftrue ofs0016
         returnvoid
         ofs0016:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_layoutDirection")
         pushnull
         equals
         not
         dup
         iffalse ofs002d
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_layoutDirection")
         getlocal1
         getproperty QName(Namespace("mx.core:ILayoutDirectionElement"),"layoutDirection")
         equals
         not
         ofs002d:
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         iffalse ofs0045
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"mirror")
         equals
         not
         jump ofs0047
         ofs0045:
         getlocal2
         convert_b
         ofs0047:
         iffalse ofs0073
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0059
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         ofs0059:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal2
         setproperty QName(PackageNamespace(""),"mirror")
         getlocal0
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 1
         ofs0073:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function initialized(param1:Object, param2:String) : void
      {
         trait method QName(PackageNamespace(""),"initialized")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal2
         setproperty QName(PackageNamespace(""),"id")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function localToGlobal(param1:Point) : Point
      {
         trait method QName(PackageNamespace(""),"localToGlobal")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Point")
         returns QName(PackageNamespace("flash.geom"),"Point")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         not
         dup
         iftrue ofs0015
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"parent")
         not
         ofs0015:
         iffalse ofs0027
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         returnvalue
         ofs0027:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal1
         callproperty QName(PackageNamespace(""),"localToGlobal"), 1
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         iftrue ofs0055
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawX")
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawY")
         add
         setproperty QName(PackageNamespace(""),"y")
         ofs0055:
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function createDisplayObject() : DisplayObject
      {
         trait method QName(PackageNamespace(""),"createDisplayObject")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         findpropstrict QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite")
         constructprop QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite"), 0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"setDisplayObject"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function set alwaysCreateDisplayObject(param1:Boolean) : void
      {
         trait setter QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"alwaysCreateDisplayObject")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal2
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_alwaysCreateDisplayObject")
         ifeq ofs0026
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"64"),"_alwaysCreateDisplayObject")
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         ifeq ofs0026
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs0026:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function get alwaysCreateDisplayObject() : Boolean
      {
         trait getter QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"alwaysCreateDisplayObject")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_alwaysCreateDisplayObject")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function get needsDisplayObject() : Boolean
      {
         trait getter QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.geom"),"TransformOffsets")
         setlocal2
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"alwaysCreateDisplayObject")
         coerce_a
         dup
         iftrue ofs0028
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_filters")
         coerce_a
         dup
         iffalse ofs0027
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_filters")
         getproperty QName(PackageNamespace(""),"length")
         pushbyte 0
         greaterthan
         coerce_a
         ofs0027:
         coerce_a
         ofs0028:
         coerce_a
         dup
         iftrue ofs004b
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_blendMode")
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         not
         dup
         iffalse ofs004a
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_blendMode")
         pushstring "auto"
         equals
         not
         ofs004a:
         coerce_a
         ofs004b:
         coerce_a
         dup
         iftrue ofs0057
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         coerce_a
         ofs0057:
         coerce_a
         dup
         iftrue ofs00ea
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         not
         dup
         iffalse ofs00e9
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleX")
         pushbyte 1
         equals
         not
         dup
         iftrue ofs0087
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleY")
         pushbyte 1
         equals
         not
         ofs0087:
         dup
         iftrue ofs0098
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleZ")
         pushbyte 1
         equals
         not
         ofs0098:
         dup
         iftrue ofs00a9
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationX")
         pushbyte 0
         equals
         not
         ofs00a9:
         dup
         iftrue ofs00ba
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationY")
         pushbyte 0
         equals
         not
         ofs00ba:
         dup
         iftrue ofs00cb
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationZ")
         pushbyte 0
         equals
         not
         ofs00cb:
         dup
         iftrue ofs00dc
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutZ")
         pushbyte 0
         equals
         not
         ofs00dc:
         dup
         iftrue ofs00e9
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"mirror")
         ofs00e9:
         coerce_a
         ofs00ea:
         convert_b
         dup
         iftrue ofs00f8
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_colorTransform")
         pushnull
         equals
         not
         ofs00f8:
         dup
         iftrue ofs0106
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_effectiveAlpha")
         pushbyte 1
         equals
         not
         ofs0106:
         convert_b
         setlocal1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         not
         dup
         iffalse ofs011f
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         pushnull
         equals
         not
         ofs011f:
         iffalse ofs0193
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         coerce QName(PackageNamespace("mx.geom"),"TransformOffsets")
         setlocal2
         getlocal1
         convert_b
         dup
         iftrue ofs0191
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"scaleX")
         pushbyte 1
         equals
         not
         dup
         iftrue ofs014b
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"scaleY")
         pushbyte 1
         equals
         not
         ofs014b:
         dup
         iftrue ofs0159
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"scaleZ")
         pushbyte 1
         equals
         not
         ofs0159:
         dup
         iftrue ofs0167
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"rotationX")
         pushbyte 0
         equals
         not
         ofs0167:
         dup
         iftrue ofs0175
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"rotationY")
         pushbyte 0
         equals
         not
         ofs0175:
         dup
         iftrue ofs0183
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"rotationZ")
         pushbyte 0
         equals
         not
         ofs0183:
         dup
         iftrue ofs0191
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"z")
         pushbyte 0
         equals
         not
         ofs0191:
         convert_b
         setlocal1
         ofs0193:
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setSharedDisplayObject(param1:DisplayObject) : Boolean
      {
         trait method QName(PackageNamespace(""),"setSharedDisplayObject")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlex QName(PackageNamespace("flash.display"),"Sprite")
         istypelate
         not
         dup
         iftrue ofs0012
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_alwaysCreateDisplayObject")
         convert_b
         ofs0012:
         dup
         iftrue ofs001d
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         ofs001d:
         iffalse ofs0023
         pushfalse
         returnvalue
         ofs0023:
         getlocal0
         getlocal1
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"setDisplayObject"), 1
         pushtrue
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function canShareWithPrevious(param1:IGraphicElement) : Boolean
      {
         trait method QName(PackageNamespace(""),"canShareWithPrevious")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlex QName(PackageNamespace("spark.primitives.supportClasses"),"GraphicElement")
         istypelate
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function canShareWithNext(param1:IGraphicElement) : Boolean
      {
         trait method QName(PackageNamespace(""),"canShareWithNext")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlex QName(PackageNamespace("spark.primitives.supportClasses"),"GraphicElement")
         istypelate
         dup
         iffalse ofs0012
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_alwaysCreateDisplayObject")
         not
         ofs0012:
         dup
         iffalse ofs001d
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         not
         ofs001d:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function get drawnDisplayObject() : DisplayObject
      {
         trait getter QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_drawnDisplayObject")
         iffalse ofs0014
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_drawnDisplayObject")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         jump ofs001a
         ofs0014:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         ofs001a:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function captureBitmapData(param1:Boolean = true, param2:uint = 4294967295, param3:Boolean = true, param4:Rectangle = null) : BitmapData
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"captureBitmapData")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace(""),"uint")
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace("flash.geom"),"Rectangle")
         optional True()
         optional Double(4294967295)
         optional True()
         optional Null()
         returns QName(PackageNamespace("flash.display"),"BitmapData")
         
         body
         maxstack 6
         localcount 11
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal 5
         pushnull
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal 6
         pushnull
         coerce QName(PackageNamespace("flash.display"),"Sprite")
         setlocal 7
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 8
         pushnull
         coerce QName(PackageNamespace("flash.display"),"BitmapData")
         setlocal 9
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal 10
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         not
         dup
         iftrue ofs0031
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"is3D")
         not
         ofs0031:
         iffalse ofs0167
         pushfalse
         setlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         not
         dup
         iftrue ofs004f
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         equals
         not
         ofs004f:
         iffalse ofs0085
         pushtrue
         setlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal 6
         getlocal0
         findpropstrict QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite")
         constructprop QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite"), 0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"setDisplayObject"), 1
         findpropstrict QName(PackageNamespace("mx.core"),"UIComponent")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"UIComponent"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$addChild"), 1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"validateDisplayList"), 0
         ofs0085:
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         findpropstrict QName(PackageNamespace("mx.core"),"IUIComponent")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"IUIComponent"), 1
         getproperty QName(Namespace("mx.core:IUIComponent"),"systemManager")
         callproperty QName(Namespace("mx.managers:ISystemManager"),"getSandboxRoot"), 0
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         coerce QName(PackageNamespace("flash.display"),"Sprite")
         setlocal 7
         getlocal3
         iffalse ofs00c2
         findpropstrict QName(PackageNamespace("flash.geom"),"Rectangle")
         getlocal0
         callproperty QName(PackageNamespace(""),"getLayoutBoundsX"), 0
         getlocal0
         callproperty QName(PackageNamespace(""),"getLayoutBoundsY"), 0
         getlocal0
         callproperty QName(PackageNamespace(""),"getLayoutBoundsWidth"), 0
         getlocal0
         callproperty QName(PackageNamespace(""),"getLayoutBoundsHeight"), 0
         constructprop QName(PackageNamespace("flash.geom"),"Rectangle"), 4
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         jump ofs00ce
         ofs00c2:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 7
         callproperty QName(PackageNamespace(""),"getBounds"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         ofs00ce:
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 8
         findpropstrict QName(PackageNamespace("flash.display"),"BitmapData")
         getlex QName(PackageNamespace(""),"Math")
         getlocal 8
         getproperty QName(PackageNamespace(""),"width")
         callproperty QName(PackageNamespace(""),"ceil"), 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal 8
         getproperty QName(PackageNamespace(""),"height")
         callproperty QName(PackageNamespace(""),"ceil"), 1
         getlocal1
         getlocal2
         constructprop QName(PackageNamespace("flash.display"),"BitmapData"), 4
         coerce QName(PackageNamespace("flash.display"),"BitmapData")
         setlocal 9
         getlocal3
         iffalse ofs010a
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getproperty QName(PackageNamespace(""),"matrix")
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         jump ofs0117
         ofs010a:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace(""),"getConcatenatedMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         ofs0117:
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         dup
         setlocal 10
         iffalse ofs0132
         getlocal 10
         getlocal 8
         getproperty QName(PackageNamespace(""),"x")
         negate
         getlocal 8
         getproperty QName(PackageNamespace(""),"y")
         negate
         callpropvoid QName(PackageNamespace(""),"translate"), 2
         ofs0132:
         getlocal 9
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 10
         pushnull
         pushnull
         getlocal 4
         callpropvoid QName(PackageNamespace(""),"draw"), 5
         getlocal 5
         iffalse ofs0160
         findpropstrict QName(PackageNamespace("mx.core"),"UIComponent")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"UIComponent"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$removeChild"), 1
         getlocal0
         getlocal 6
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"setDisplayObject"), 1
         ofs0160:
         getlocal 9
         returnvalue
         jump ofs0167
         ofs0167:
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         callproperty QName(PrivateNamespace(null,"64"),"get3DSnapshot"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function get3DSnapshot(param1:Boolean = true, param2:uint = 4294967295, param3:Boolean = true) : BitmapData
      {
         trait method QName(PrivateNamespace(null,"64"),"get3DSnapshot")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace(""),"uint")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         optional Double(4294967295)
         optional True()
         returns QName(PackageNamespace("flash.display"),"BitmapData")
         
         body
         maxstack 7
         localcount 15
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         findpropstrict QName(PackageNamespace("mx.core"),"IUIComponent")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"IUIComponent"), 1
         getproperty QName(Namespace("mx.core:IUIComponent"),"systemManager")
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         coerce QName(PackageNamespace("flash.display"),"Sprite")
         setlocal 4
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         setlocal 5
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         constructprop QName(PackageNamespace("flash.display"),"Sprite"), 0
         coerce QName(PackageNamespace("flash.display"),"Sprite")
         setlocal 6
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 4
         callproperty QName(PackageNamespace(""),"getBounds"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 7
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 5
         callproperty QName(PackageNamespace(""),"getBounds"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 8
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getproperty QName(PackageNamespace(""),"matrix3D")
         callproperty QName(PackageNamespace(""),"clone"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal 9
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal 4
         callproperty QName(PackageNamespace(""),"getRelativeMatrix3D"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal 10
         getlocal 9
         callproperty QName(PackageNamespace(""),"clone"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal 11
         getlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace(""),"getChildIndex"), 1
         convert_i
         setlocal 12
         getlocal 5
         getlex QName(PackageNamespace("spark.components"),"Group")
         istypelate
         iffalse ofs00a0
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal 5
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$removeChild"), 1
         jump ofs00aa
         ofs00a0:
         getlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(PackageNamespace(""),"removeChild"), 1
         ofs00aa:
         getlocal 4
         getlocal 6
         callpropvoid QName(PackageNamespace(""),"addChild"), 1
         getlocal 6
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(PackageNamespace(""),"addChild"), 1
         getlocal3
         iffalse ofs00db
         getlocal 11
         getlocal 10
         getproperty QName(PackageNamespace(""),"position")
         setproperty QName(PackageNamespace(""),"position")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal 11
         setproperty QName(PackageNamespace(""),"matrix3D")
         jump ofs00e7
         ofs00db:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal 10
         setproperty QName(PackageNamespace(""),"matrix3D")
         ofs00e7:
         findpropstrict QName(PackageNamespace("flash.geom"),"Matrix")
         constructprop QName(PackageNamespace("flash.geom"),"Matrix"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         dup
         setlocal 13
         getlocal 7
         getproperty QName(PackageNamespace(""),"left")
         negate
         getlocal 7
         getproperty QName(PackageNamespace(""),"top")
         negate
         callpropvoid QName(PackageNamespace(""),"translate"), 2
         findpropstrict QName(PackageNamespace("flash.display"),"BitmapData")
         getlocal 7
         getproperty QName(PackageNamespace(""),"width")
         getlocal 7
         getproperty QName(PackageNamespace(""),"height")
         getlocal1
         getlocal2
         constructprop QName(PackageNamespace("flash.display"),"BitmapData"), 4
         coerce QName(PackageNamespace("flash.display"),"BitmapData")
         dup
         setlocal 14
         getlocal 6
         getlocal 13
         pushnull
         pushnull
         pushnull
         pushtrue
         callpropvoid QName(PackageNamespace(""),"draw"), 6
         getlocal 6
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(PackageNamespace(""),"removeChild"), 1
         getlocal 4
         getlocal 6
         callpropvoid QName(PackageNamespace(""),"removeChild"), 1
         getlocal 5
         getlex QName(PackageNamespace("spark.components"),"Group")
         istypelate
         iffalse ofs0156
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal 5
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 12
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$addChildAt"), 2
         jump ofs0162
         ofs0156:
         getlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 12
         callpropvoid QName(PackageNamespace(""),"addChildAt"), 2
         ofs0162:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal 9
         setproperty QName(PackageNamespace(""),"matrix3D")
         getlocal 14
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function layer_PropertyChange(param1:PropertyChangeEvent) : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layer_PropertyChange")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.events"),"PropertyChangeEvent")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 6
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal2
         pushnan
         setlocal3
         pushnull
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal 4
         jump ofs008e
         ofs0010:
         label
         getlocal1
         getproperty QName(PackageNamespace(""),"newValue")
         convert_b
         dup
         iffalse ofs0021
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_visible")
         convert_b
         ofs0021:
         convert_b
         setlocal2
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         ifeq ofs003b
         getlocal0
         getlocal2
         initproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"visibleChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         ofs003b:
         jump ofs00ce
         ofs003f:
         label
         findpropstrict QName(PackageNamespace(""),"Number")
         getlocal1
         getproperty QName(PackageNamespace(""),"newValue")
         callproperty QName(PackageNamespace(""),"Number"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_alpha")
         multiply
         convert_d
         setlocal3
         getlocal3
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_effectiveAlpha")
         ifeq ofs0085
         getlocal0
         getlocal3
         initproperty QName(PrivateNamespace(null,"64"),"_effectiveAlpha")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"64"),"alphaChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_transform")
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         dup
         setlocal 4
         iffalse ofs007b
         getlocal 4
         pushfalse
         setproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyColorTransformAlpha")
         ofs007b:
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         ofs0085:
         jump ofs00ce
         ofs0089:
         label
         jump ofs00ce
         ofs008e:
         getlocal1
         getproperty QName(PackageNamespace(""),"property")
         setlocal 5
         pushstring "effectiveVisibility"
         getlocal 5
         ifstrictne ofs00a3
         pushbyte 0
         jump ofs00be
         ofs00a3:
         pushstring "effectiveAlpha"
         getlocal 5
         ifstrictne ofs00b2
         pushbyte 1
         jump ofs00be
         ofs00b2:
         jump ofs00bc
         pushbyte 2
         jump ofs00bc
         ofs00bc:
         pushbyte 2
         ofs00be:
         kill 5
         lookupswitch ofs0089, [ofs0010, ofs003f, ofs0089]
         ofs00ce:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function dispatchPropertyChangeEvent(param1:String, param2:*, param3:*) : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         param null
         param null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"hasEventListener")
         pushstring "propertyChange"
         callproperty QName(PackageNamespace(""),"hasEventListener"), 1
         iffalse ofs0021
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         getlex QName(PackageNamespace("mx.events"),"PropertyChangeEvent")
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         callproperty QName(PackageNamespace(""),"createUpdateEvent"), 4
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         ofs0021:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function invalidateDisplayObjectSharing() : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs001a
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateGraphicElementSharing"), 1
         ofs001a:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateProperties() : void
      {
         trait method QName(PackageNamespace(""),"invalidateProperties")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         iffalse ofs000b
         returnvoid
         ofs000b:
         getlocal0
         pushtrue
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs0028
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateGraphicElementProperties"), 1
         ofs0028:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateSize() : void
      {
         trait method QName(PackageNamespace(""),"invalidateSize")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         iffalse ofs000b
         returnvoid
         ofs000b:
         getlocal0
         pushtrue
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs0028
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateGraphicElementSize"), 1
         ofs0028:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function invalidateParentSizeAndDisplayList() : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"includeInLayout")
         iftrue ofs000b
         returnvoid
         ofs000b:
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         convert_b
         dup
         iffalse ofs001d
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         getlex QName(PackageNamespace("mx.core"),"IInvalidating")
         istypelate
         ofs001d:
         iffalse ofs003b
         findpropstrict QName(PackageNamespace("mx.core"),"IInvalidating")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"IInvalidating"), 1
         callpropvoid QName(Namespace("mx.core:IInvalidating"),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace("mx.core"),"IInvalidating")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"IInvalidating"), 1
         callpropvoid QName(Namespace("mx.core:IInvalidating"),"invalidateDisplayList"), 0
         ofs003b:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateDisplayList() : void
      {
         trait method QName(PackageNamespace(""),"invalidateDisplayList")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         iffalse ofs000b
         returnvoid
         ofs000b:
         getlocal0
         pushtrue
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs0028
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateGraphicElementDisplayList"), 1
         ofs0028:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function validateNow() : void
      {
         trait method QName(PackageNamespace(""),"validateNow")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs001f
         getlex QName(PackageNamespace("mx.core"),"UIComponentGlobals")
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"layoutManager")
         findpropstrict QName(PackageNamespace("mx.managers"),"ILayoutManagerClient")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.managers"),"ILayoutManagerClient"), 1
         callpropvoid QName(Namespace("mx.managers:ILayoutManager"),"validateClient"), 1
         ofs001f:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function validateProperties() : void
      {
         trait method QName(PackageNamespace(""),"validateProperties")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         iftrue ofs000b
         returnvoid
         ofs000b:
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"commitProperties"), 0
         getlocal0
         pushfalse
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         not
         dup
         iffalse ofs0025
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         not
         ofs0025:
         dup
         iffalse ofs0030
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         not
         ofs0030:
         iffalse ofs0039
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"64"),"dispatchUpdateComplete"), 0
         ofs0039:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function commitProperties() : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"commitProperties")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal2
         pushfalse
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         not
         dup
         iffalse ofs0020
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         convert_b
         ofs0020:
         iffalse ofs03df
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"colorTransformChanged")
         convert_b
         dup
         iftrue ofs0034
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"displayObjectChanged")
         convert_b
         ofs0034:
         iffalse ofs0053
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"64"),"colorTransformChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_colorTransform")
         iffalse ofs0053
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_colorTransform")
         setproperty QName(PackageNamespace(""),"colorTransform")
         ofs0053:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"alphaChanged")
         convert_b
         dup
         iftrue ofs0063
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"displayObjectChanged")
         convert_b
         ofs0063:
         iffalse ofs0094
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"64"),"alphaChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_transform")
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal2
         getlocal2
         not
         dup
         iftrue ofs0085
         pop
         getlocal2
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyColorTransformAlpha")
         not
         ofs0085:
         iffalse ofs0094
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_effectiveAlpha")
         setproperty QName(PackageNamespace(""),"alpha")
         ofs0094:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"blendModeChanged")
         convert_b
         dup
         iftrue ofs00a4
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"displayObjectChanged")
         convert_b
         ofs00a4:
         iffalse ofs0269
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"64"),"blendModeChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_blendMode")
         pushstring "auto"
         ifne ofs00f2
         getlocal0
         getproperty QName(PackageNamespace(""),"alpha")
         pushbyte 0
         equals
         dup
         iftrue ofs00cc
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"alpha")
         pushbyte 1
         equals
         ofs00cc:
         iffalse ofs00e1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         setproperty QName(PackageNamespace(""),"blendMode")
         jump ofs00ee
         ofs00e1:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"LAYER")
         setproperty QName(PackageNamespace(""),"blendMode")
         ofs00ee:
         jump ofs0118
         ofs00f2:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_blendMode")
         callproperty QName(PrivateNamespace(null,"64"),"isAIMBlendMode"), 1
         iftrue ofs010e
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_blendMode")
         setproperty QName(PackageNamespace(""),"blendMode")
         jump ofs0118
         ofs010e:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         pushstring "normal"
         setproperty QName(PackageNamespace(""),"blendMode")
         ofs0118:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"blendShaderChanged")
         iffalse ofs0269
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"64"),"blendShaderChanged")
         jump ofs01c6
         ofs0129:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs0269
         ofs013c:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorDodgeShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorDodgeShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs0269
         ofs014f:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorBurnShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorBurnShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs0269
         ofs0162:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ExclusionShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ExclusionShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs0269
         ofs0175:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"HueShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"HueShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs0269
         ofs0188:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs0269
         ofs019b:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"SaturationShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"SaturationShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs0269
         ofs01ae:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"SoftLightShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"SoftLightShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs0269
         ofs01c1:
         label
         jump ofs0269
         ofs01c6:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_blendMode")
         setlocal3
         pushstring "color"
         getlocal3
         ifstrictne ofs01d9
         pushbyte 0
         jump ofs0247
         ofs01d9:
         pushstring "colordodge"
         getlocal3
         ifstrictne ofs01e7
         pushbyte 1
         jump ofs0247
         ofs01e7:
         pushstring "colorburn"
         getlocal3
         ifstrictne ofs01f5
         pushbyte 2
         jump ofs0247
         ofs01f5:
         pushstring "exclusion"
         getlocal3
         ifstrictne ofs0203
         pushbyte 3
         jump ofs0247
         ofs0203:
         pushstring "hue"
         getlocal3
         ifstrictne ofs0211
         pushbyte 4
         jump ofs0247
         ofs0211:
         pushstring "luminosity"
         getlocal3
         ifstrictne ofs021f
         pushbyte 5
         jump ofs0247
         ofs021f:
         pushstring "saturation"
         getlocal3
         ifstrictne ofs022d
         pushbyte 6
         jump ofs0247
         ofs022d:
         pushstring "softlight"
         getlocal3
         ifstrictne ofs023b
         pushbyte 7
         jump ofs0247
         ofs023b:
         jump ofs0245
         pushbyte 8
         jump ofs0245
         ofs0245:
         pushbyte 8
         ofs0247:
         kill 3
         lookupswitch ofs01c1, [ofs0129, ofs013c, ofs014f, ofs0162, ofs0175, ofs0188, ofs019b, ofs01ae, ofs01c1]
         ofs0269:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"filtersChanged")
         convert_b
         dup
         iftrue ofs0279
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"displayObjectChanged")
         convert_b
         ofs0279:
         iffalse ofs02a1
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"64"),"filtersChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"filtersChanged")
         convert_b
         dup
         iftrue ofs0292
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_clonedFilters")
         convert_b
         ofs0292:
         iffalse ofs02a1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_clonedFilters")
         setproperty QName(PackageNamespace(""),"filters")
         ofs02a1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"maskChanged")
         convert_b
         dup
         iftrue ofs02b1
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"displayObjectChanged")
         convert_b
         ofs02b1:
         iffalse ofs0359
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"64"),"maskChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         iffalse ofs0359
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         getproperty QName(PackageNamespace(""),"parent")
         iftrue ofs034e
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         callpropvoid QName(PackageNamespace(""),"addChild"), 1
         getlex QName(PackageNamespace("spark.utils"),"MaskUtil")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyMask"), 2
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_drawnDisplayObject")
         iftrue ofs034e
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlex QName(PackageNamespace("flash.display"),"Sprite")
         istypelate
         iffalse ofs0314
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         getproperty QName(PackageNamespace(""),"graphics")
         callpropvoid QName(PackageNamespace(""),"clear"), 0
         jump ofs0332
         ofs0314:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlex QName(PackageNamespace("flash.display"),"Shape")
         istypelate
         iffalse ofs0332
         findpropstrict QName(PackageNamespace("flash.display"),"Shape")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace("flash.display"),"Shape"), 1
         getproperty QName(PackageNamespace(""),"graphics")
         callpropvoid QName(PackageNamespace(""),"clear"), 0
         ofs0332:
         getlocal0
         findpropstrict QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite")
         constructprop QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite"), 0
         initproperty QName(PrivateNamespace(null,"64"),"_drawnDisplayObject")
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_drawnDisplayObject")
         callpropvoid QName(PackageNamespace(""),"addChild"), 1
         ofs034e:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         setproperty QName(PackageNamespace(""),"mask")
         ofs0359:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"luminositySettingsChanged")
         iffalse ofs037d
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"64"),"luminositySettingsChanged")
         getlex QName(PackageNamespace("spark.utils"),"MaskUtil")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_maskType")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_luminosityInvert")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_luminosityClip")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyLuminositySettings"), 4
         ofs037d:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"maskTypeChanged")
         convert_b
         dup
         iftrue ofs038d
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"displayObjectChanged")
         convert_b
         ofs038d:
         iffalse ofs03b1
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"64"),"maskTypeChanged")
         getlex QName(PackageNamespace("spark.utils"),"MaskUtil")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_mask")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_maskType")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_luminosityInvert")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_luminosityClip")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyMaskType"), 5
         ofs03b1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"displayObjectChanged")
         iffalse ofs03d8
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         ifne ofs03d4
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         convert_b
         jump ofs03d5
         ofs03d4:
         pushtrue
         ofs03d5:
         setproperty QName(PackageNamespace(""),"visible")
         ofs03d8:
         pushtrue
         setlocal1
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"64"),"displayObjectChanged")
         ofs03df:
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"visibleChanged")
         iffalse ofs040e
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"64"),"visibleChanged")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         ifne ofs0409
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         setproperty QName(PackageNamespace(""),"visible")
         jump ofs040e
         ofs0409:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs040e:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         dup
         iftrue ofs0422
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"updatePending")
         convert_b
         ofs0422:
         dup
         iftrue ofs042a
         pop
         getlocal1
         convert_b
         ofs042a:
         iffalse ofs0433
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyComputedTransform"), 0
         ofs0433:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function validateSize() : void
      {
         trait method QName(PackageNamespace(""),"validateSize")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         iftrue ofs000b
         returnvoid
         ofs000b:
         getlocal0
         pushfalse
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         getlocal0
         callproperty QName(PrivateNamespace(null,"64"),"measureSizes"), 0
         convert_b
         setlocal1
         getlocal1
         not
         dup
         iftrue ofs0024
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"includeInLayout")
         not
         ofs0024:
         iffalse ofs004d
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         not
         dup
         iffalse ofs0038
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         not
         ofs0038:
         dup
         iffalse ofs0043
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         not
         ofs0043:
         iffalse ofs004c
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"64"),"dispatchUpdateComplete"), 0
         ofs004c:
         returnvoid
         ofs004d:
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function canSkipMeasurement() : Boolean
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"canSkipMeasurement")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs0020
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs0020:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function measureSizes() : Boolean
      {
         trait method QName(PrivateNamespace(null,"64"),"measureSizes")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 5
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         convert_d
         setlocal1
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         convert_d
         setlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         convert_d
         setlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         convert_d
         setlocal 4
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"canSkipMeasurement"), 0
         iftrue ofs002b
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"measure"), 0
         ofs002b:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs0046
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinWidth")
         lessthan
         ofs0046:
         iffalse ofs0052
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinWidth")
         initproperty QName(PackageNamespace(""),"measuredWidth")
         ofs0052:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs006d
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxWidth")
         greaterthan
         ofs006d:
         iffalse ofs0079
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxWidth")
         initproperty QName(PackageNamespace(""),"measuredWidth")
         ofs0079:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs0094
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredHeight")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinHeight")
         lessthan
         ofs0094:
         iffalse ofs00a0
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinHeight")
         initproperty QName(PackageNamespace(""),"measuredHeight")
         ofs00a0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs00bb
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredHeight")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxHeight")
         greaterthan
         ofs00bb:
         iffalse ofs00c7
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxHeight")
         initproperty QName(PackageNamespace(""),"measuredHeight")
         ofs00c7:
         getlocal1
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         equals
         not
         dup
         iftrue ofs00dd
         pop
         getlocal2
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         equals
         not
         ofs00dd:
         dup
         iftrue ofs00ea
         pop
         getlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         equals
         not
         ofs00ea:
         dup
         iftrue ofs00f8
         pop
         getlocal 4
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         equals
         not
         ofs00f8:
         iffalse ofs00fe
         pushtrue
         returnvalue
         ofs00fe:
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function measure() : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"measure")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"measuredWidth")
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"measuredHeight")
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"measuredX")
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"measuredY")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function validateDisplayList() : void
      {
         trait method QName(PackageNamespace(""),"validateDisplayList")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         convert_b
         setlocal1
         getlocal0
         pushfalse
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         dup
         iftrue ofs0021
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"updatePending")
         convert_b
         ofs0021:
         iffalse ofs002a
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyComputedTransform"), 0
         ofs002a:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         ifeq ofs0053
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         getlex QName(PackageNamespace("flash.display"),"Sprite")
         istypelate
         iffalse ofs0053
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         getproperty QName(PackageNamespace(""),"graphics")
         callpropvoid QName(PackageNamespace(""),"clear"), 0
         ofs0053:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"doUpdateDisplayList"), 0
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         not
         dup
         iffalse ofs0068
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         not
         ofs0068:
         dup
         iffalse ofs0073
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         not
         ofs0073:
         dup
         iffalse ofs007b
         pop
         getlocal1
         convert_b
         ofs007b:
         iffalse ofs0084
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"64"),"dispatchUpdateComplete"), 0
         ofs0084:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function doUpdateDisplayList() : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"doUpdateDisplayList")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         convert_b
         dup
         iftrue ofs0018
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         equals
         ofs0018:
         iffalse ofs0029
         getlocal0
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"updateDisplayList"), 2
         ofs0029:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function updateDisplayList(param1:Number, param2:Number) : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"updateDisplayList")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function dispatchUpdateComplete() : void
      {
         trait method QName(PrivateNamespace(null,"64"),"dispatchUpdateComplete")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"hasEventListener")
         getlex QName(PackageNamespace("mx.events"),"FlexEvent")
         getproperty QName(PackageNamespace(""),"UPDATE_COMPLETE")
         callproperty QName(PackageNamespace(""),"hasEventListener"), 1
         iffalse ofs0023
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         findpropstrict QName(PackageNamespace("mx.events"),"FlexEvent")
         getlex QName(PackageNamespace("mx.events"),"FlexEvent")
         getproperty QName(PackageNamespace(""),"UPDATE_COMPLETE")
         constructprop QName(PackageNamespace("mx.events"),"FlexEvent"), 1
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         ofs0023:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getMaxBoundsWidth(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getMaxBoundsWidth")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformWidthForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getMaxBoundsHeight(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getMaxBoundsHeight")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformHeightForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getMinBoundsWidth(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getMinBoundsWidth")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformWidthForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getMinBoundsHeight(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getMinBoundsHeight")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformHeightForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getPreferredBoundsWidth(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getPreferredBoundsWidth")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformWidthForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getPreferredBoundsHeight(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getPreferredBoundsHeight")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformHeightForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getBoundsXAtSize(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getBoundsXAtSize")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 10
         localcount 8
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 4
         getlocal0
         getlocal3
         callproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         dup
         setlocal 5
         iftrue ofs002b
         getlocal 4
         getproperty QName(PackageNamespace(""),"left")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         add
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         ofs002b:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0040
         getlocal1
         getlocal 4
         getproperty QName(PackageNamespace(""),"width")
         subtract
         convert_d
         setlocal1
         ofs0040:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0055
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"height")
         subtract
         convert_d
         setlocal2
         ofs0055:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal 5
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         callproperty QName(PackageNamespace(""),"fitBounds"), 9
         coerce QName(PackageNamespace("flash.geom"),"Point")
         dup
         setlocal 6
         iftrue ofs0094
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 6
         ofs0094:
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 7
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal 6
         getproperty QName(PackageNamespace(""),"x")
         getlocal 6
         getproperty QName(PackageNamespace(""),"y")
         getlocal 5
         getlocal 7
         callpropvoid QName(PackageNamespace(""),"transformBounds"), 4
         getlocal 4
         getproperty QName(PackageNamespace(""),"left")
         getlocal 7
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getBoundsYAtSize(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getBoundsYAtSize")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 10
         localcount 8
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 4
         getlocal0
         getlocal3
         callproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         dup
         setlocal 5
         iftrue ofs002b
         getlocal 4
         getproperty QName(PackageNamespace(""),"top")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         add
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         ofs002b:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0040
         getlocal1
         getlocal 4
         getproperty QName(PackageNamespace(""),"width")
         subtract
         convert_d
         setlocal1
         ofs0040:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0055
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"height")
         subtract
         convert_d
         setlocal2
         ofs0055:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal 5
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         callproperty QName(PackageNamespace(""),"fitBounds"), 9
         coerce QName(PackageNamespace("flash.geom"),"Point")
         dup
         setlocal 6
         iftrue ofs0094
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 6
         ofs0094:
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 7
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal 6
         getproperty QName(PackageNamespace(""),"x")
         getlocal 6
         getproperty QName(PackageNamespace(""),"y")
         getlocal 5
         getlocal 7
         callpropvoid QName(PackageNamespace(""),"transformBounds"), 4
         getlocal 4
         getproperty QName(PackageNamespace(""),"top")
         getlocal 7
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutBoundsX(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getLayoutBoundsX")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 5
         localcount 5
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"left")
         convert_d
         setlocal2
         getlocal0
         getlocal1
         callproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal3
         getlocal3
         iftrue ofs0027
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         add
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         ofs0027:
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal3
         getlocal 4
         callpropvoid QName(PackageNamespace(""),"transformBounds"), 4
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutBoundsY(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getLayoutBoundsY")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 5
         localcount 5
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"top")
         convert_d
         setlocal2
         getlocal0
         getlocal1
         callproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal3
         getlocal3
         iftrue ofs0027
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         add
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         ofs0027:
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal3
         getlocal 4
         callpropvoid QName(PackageNamespace(""),"transformBounds"), 4
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutBoundsWidth(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getLayoutBoundsWidth")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformWidthForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutBoundsHeight(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getLayoutBoundsHeight")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformHeightForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function transformWidthForLayout(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformWidthForLayout")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal3
         convert_b
         dup
         iffalse ofs000f
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs000f:
         iffalse ofs0028
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PackageNamespace(""),"transformSize"), 3
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal1
         ofs0028:
         getlocal1
         getlocal0
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"width")
         add
         convert_d
         setlocal1
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function transformHeightForLayout(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformHeightForLayout")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal3
         convert_b
         dup
         iffalse ofs000f
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs000f:
         iffalse ofs0028
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PackageNamespace(""),"transformSize"), 3
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal2
         ofs0028:
         getlocal2
         getlocal0
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"height")
         add
         convert_d
         setlocal2
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function preferredWidthPreTransform() : Number
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs001a
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredWidth")
         convert_d
         jump ofs001f
         ofs001a:
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         convert_d
         ofs001f:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function preferredHeightPreTransform() : Number
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs001a
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredHeight")
         convert_d
         jump ofs001f
         ofs001a:
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitHeight")
         convert_d
         ofs001f:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setLayoutBoundsPosition(param1:Number, param2:Number, param3:Boolean = true) : void
      {
         trait method QName(PackageNamespace(""),"setLayoutBoundsPosition")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 10
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal3
         callproperty QName(PackageNamespace(""),"getLayoutBoundsX"), 1
         convert_d
         setlocal 4
         getlocal0
         getlocal3
         callproperty QName(PackageNamespace(""),"getLayoutBoundsY"), 1
         convert_d
         setlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal 6
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal 7
         getlocal 6
         getlocal1
         add
         getlocal 4
         subtract
         convert_d
         setlocal 8
         getlocal 7
         getlocal2
         add
         getlocal 5
         subtract
         convert_d
         setlocal 9
         getlocal 8
         getlocal 6
         equals
         not
         dup
         iftrue ofs0048
         pop
         getlocal 9
         getlocal 7
         equals
         not
         ofs0048:
         iffalse ofs00ab
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0073
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal 8
         setproperty QName(PackageNamespace(""),"layoutX")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal 9
         setproperty QName(PackageNamespace(""),"layoutY")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushtrue
         setproperty QName(PackageNamespace(""),"updatePending")
         jump ofs007f
         ofs0073:
         getlocal0
         getlocal 8
         initproperty QName(PrivateNamespace(null,"64"),"_x")
         getlocal0
         getlocal 9
         initproperty QName(PrivateNamespace(null,"64"),"_y")
         ofs007f:
         getlocal 8
         getlocal 6
         ifeq ofs0093
         getlocal0
         pushstring "x"
         getlocal 6
         getlocal 8
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs0093:
         getlocal 9
         getlocal 7
         ifeq ofs00a6
         getlocal0
         pushstring "y"
         getlocal 7
         getlocal 9
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs00a6:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs00ab:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setLayoutBoundsSize(param1:Number, param2:Number, param3:Boolean = true) : void
      {
         trait method QName(PackageNamespace(""),"setLayoutBoundsSize")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 10
         localcount 9
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal 4
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 5
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 6
         pushnan
         setlocal 7
         pushnan
         setlocal 8
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iftrue ofs002f
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs002f:
         iffalse ofs0067
         getlocal0
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 5
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0052
         getlocal1
         getlocal 5
         getproperty QName(PackageNamespace(""),"width")
         subtract
         convert_d
         setlocal1
         ofs0052:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0067
         getlocal2
         getlocal 5
         getproperty QName(PackageNamespace(""),"height")
         subtract
         convert_d
         setlocal2
         ofs0067:
         getlocal3
         convert_b
         dup
         iffalse ofs0074
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs0074:
         iffalse ofs0083
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal 4
         ofs0083:
         getlocal 4
         iftrue ofs00b3
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs009c
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         convert_d
         setlocal1
         ofs009c:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs00af
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         convert_d
         setlocal2
         ofs00af:
         jump ofs00ff
         ofs00b3:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal 4
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         callproperty QName(PackageNamespace(""),"fitBounds"), 9
         coerce QName(PackageNamespace("flash.geom"),"Point")
         dup
         setlocal 6
         iffalse ofs00f3
         getlocal 6
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal1
         getlocal 6
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal2
         jump ofs00ff
         ofs00f3:
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         convert_d
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         convert_d
         setlocal2
         ofs00ff:
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal1
         equals
         not
         dup
         iftrue ofs0113
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal2
         equals
         not
         ofs0113:
         iffalse ofs016d
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         convert_d
         setlocal 7
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         convert_d
         setlocal 8
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getlocal2
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         iffalse ofs0144
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutWidth")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 0
         ofs0144:
         getlocal1
         getlocal 7
         ifeq ofs0156
         getlocal0
         pushstring "width"
         getlocal 7
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs0156:
         getlocal2
         getlocal 8
         ifeq ofs0168
         getlocal0
         pushstring "height"
         getlocal 8
         getlocal2
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs0168:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs016d:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutMatrix() : Matrix
      {
         trait method QName(PackageNamespace(""),"getLayoutMatrix")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.geom"),"Matrix")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0017
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PackageNamespace(""),"clone"), 0
         returnvalue
         ofs0017:
         findpropstrict QName(PackageNamespace("flash.geom"),"Matrix")
         constructprop QName(PackageNamespace("flash.geom"),"Matrix"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_y")
         callpropvoid QName(PackageNamespace(""),"translate"), 2
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setLayoutMatrix(param1:Matrix, param2:Boolean) : void
      {
         trait method QName(PackageNamespace(""),"setLayoutMatrix")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Matrix")
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         getlocal1
         callproperty QName(PackageNamespace(""),"isEqual"), 2
         iffalse ofs0021
         returnvoid
         ofs0021:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutMatrix")
         getlocal0
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         getlocal2
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get hasLayoutMatrix3D() : Boolean
      {
         trait getter QName(PackageNamespace(""),"hasLayoutMatrix3D")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         iffalse ofs0016
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutIs3D")
         convert_b
         jump ofs0017
         ofs0016:
         pushfalse
         ofs0017:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get is3D() : Boolean
      {
         trait getter QName(PackageNamespace(""),"is3D")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         iffalse ofs0016
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"is3D")
         convert_b
         jump ofs0017
         ofs0016:
         pushfalse
         ofs0017:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutMatrix3D() : Matrix3D
      {
         trait method QName(PackageNamespace(""),"getLayoutMatrix3D")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.geom"),"Matrix3D")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0017
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix3D")
         callproperty QName(PackageNamespace(""),"clone"), 0
         returnvalue
         ofs0017:
         findpropstrict QName(PackageNamespace("flash.geom"),"Matrix3D")
         constructprop QName(PackageNamespace("flash.geom"),"Matrix3D"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal1
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_y")
         pushbyte 0
         callpropvoid QName(PackageNamespace(""),"appendTranslation"), 3
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setLayoutMatrix3D(param1:Matrix3D, param2:Boolean) : void
      {
         trait method QName(PackageNamespace(""),"setLayoutMatrix3D")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Matrix3D")
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix3D")
         getlocal1
         callproperty QName(PackageNamespace(""),"isEqual3D"), 2
         iffalse ofs0021
         returnvoid
         ofs0021:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutMatrix3D")
         getlocal0
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         getlocal2
         callpropvoid QName(PrivateNamespace(null,"64"),"invalidateTransform"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function applyComputedTransform() : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyComputedTransform")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0017
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushfalse
         setproperty QName(PackageNamespace(""),"updatePending")
         ofs0017:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         dup
         iftrue ofs002d
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         not
         ofs002d:
         iffalse ofs0032
         returnvoid
         ofs0032:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0092
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"is3D")
         iffalse ofs005b
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"computedMatrix3D")
         setproperty QName(PackageNamespace(""),"matrix3D")
         jump ofs008e
         ofs005b:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"computedMatrix")
         callproperty QName(PackageNamespace(""),"clone"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_SHARED_OBJECT")
         ifne ofs0083
         getlocal1
         pushbyte 0
         setproperty QName(PackageNamespace(""),"tx")
         getlocal1
         pushbyte 0
         setproperty QName(PackageNamespace(""),"ty")
         ofs0083:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal1
         setproperty QName(PackageNamespace(""),"matrix")
         ofs008e:
         jump ofs00cc
         ofs0092:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_SHARED_OBJECT")
         ifne ofs00b6
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"y")
         jump ofs00cc
         ofs00b6:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_x")
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_y")
         setproperty QName(PackageNamespace(""),"y")
         ofs00cc:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function getComplexMatrix(param1:Boolean) : Matrix
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace("flash.geom"),"Matrix")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         convert_b
         dup
         iffalse ofs000f
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs000f:
         iffalse ofs0020
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         jump ofs0023
         ofs0020:
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         ofs0023:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function getStrokeExtents(param1:Boolean = true) : Rectangle
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace("flash.geom"),"Rectangle")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"x")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"y")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"width")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"height")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function filterChangedHandler(param1:Event) : void
      {
         trait method QName(PrivateNamespace(null,"64"),"filterChangedHandler")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.events"),"Event")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"64"),"_filters")
         initproperty QName(PackageNamespace(""),"filters")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}

method
name null
returns null

body
maxstack 2
localcount 1
initscopedepth 1
maxscopedepth 4

code
getlocal0
pushscope
findpropstrict Multiname("GraphicElement",[PackageNamespace("spark.primitives.supportClasses")])
getlex QName(PackageNamespace(""),"Object")
pushscope
getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
pushscope
getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
newclass 224
popscope
popscope
initproperty QName(PackageNamespace("spark.primitives.supportClasses"),"GraphicElement")
returnvoid
end ; code
end ; body
end ; method

