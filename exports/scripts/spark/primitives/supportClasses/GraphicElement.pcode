package spark.primitives.supportClasses
{
   import flash.display.BitmapData;
   import flash.display.BlendMode;
   import flash.display.DisplayObject;
   import flash.display.DisplayObjectContainer;
   import flash.display.Shape;
   import flash.display.Sprite;
   import flash.events.Event;
   import flash.events.EventDispatcher;
   import flash.events.IEventDispatcher;
   import flash.geom.ColorTransform;
   import flash.geom.Matrix;
   import flash.geom.Matrix3D;
   import flash.geom.Point;
   import flash.geom.Rectangle;
   import flash.geom.Transform;
   import flash.geom.Vector3D;
   import mx.core.AdvancedLayoutFeatures;
   import mx.core.DesignLayer;
   import mx.core.IInvalidating;
   import mx.core.ILayoutDirectionElement;
   import mx.core.ILayoutElement;
   import mx.core.IMXMLObject;
   import mx.core.IUIComponent;
   import mx.core.IVisualElement;
   import mx.core.LayoutDirection;
   import mx.core.UIComponent;
   import mx.core.UIComponentGlobals;
   import mx.core.mx_internal;
   import mx.events.FlexEvent;
   import mx.events.PropertyChangeEvent;
   import mx.filters.BaseFilter;
   import mx.filters.IBitmapFilter;
   import mx.geom.Transform;
   import mx.geom.TransformOffsets;
   import mx.graphics.shaderClasses.ColorBurnShader;
   import mx.graphics.shaderClasses.ColorDodgeShader;
   import mx.graphics.shaderClasses.ColorShader;
   import mx.graphics.shaderClasses.ExclusionShader;
   import mx.graphics.shaderClasses.HueShader;
   import mx.graphics.shaderClasses.LuminosityShader;
   import mx.graphics.shaderClasses.SaturationShader;
   import mx.graphics.shaderClasses.SoftLightShader;
   import mx.managers.ILayoutManagerClient;
   import mx.utils.MatrixUtil;
   import spark.components.Group;
   import spark.components.supportClasses.InvalidatingSprite;
   import spark.core.DisplayObjectSharingMode;
   import spark.core.IGraphicElement;
   import spark.utils.MaskUtil;
   
   use namespace mx_internal;
   
   public class GraphicElement extends EventDispatcher implements IGraphicElement, IInvalidating, ILayoutElement, IVisualElement, IMXMLObject
   {
      mx_internal static const VERSION:String = "4.1.0.16076";
      
      private static const DEFAULT_MAX_WIDTH:Number = 10000;
      
      private static const DEFAULT_MAX_HEIGHT:Number = 10000;
      
      private static const DEFAULT_MIN_WIDTH:Number = 0;
      
      private static const DEFAULT_MIN_HEIGHT:Number = 0;
      
      mx_internal static var _strokeExtents:Rectangle;
      
      method
      name null
      returns null
      
      body
      maxstack 2
      localcount 1
      initscopedepth 4
      maxscopedepth 5
      
      code
      getlocal0
      pushscope
      findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
      pushstring "4.1.0.16076"
      initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"VERSION")
      findproperty QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MAX_WIDTH")
      pushshort 10000
      initproperty QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MAX_WIDTH")
      findproperty QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MAX_HEIGHT")
      pushshort 10000
      initproperty QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MAX_HEIGHT")
      findproperty QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MIN_WIDTH")
      pushbyte 0
      initproperty QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MIN_WIDTH")
      findproperty QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MIN_HEIGHT")
      pushbyte 0
      initproperty QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MIN_HEIGHT")
      findproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
      findpropstrict QName(PackageNamespace("flash.geom"),"Rectangle")
      constructprop QName(PackageNamespace("flash.geom"),"Rectangle"), 0
      setproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
      returnvoid
      end ; code
      end ; body
      end ; method
      
      private var displayObjectChanged:Boolean;
      
      private var _colorTransform:ColorTransform;
      
      private var colorTransformChanged:Boolean;
      
      private var _drawnDisplayObject:InvalidatingSprite;
      
      mx_internal var invalidatePropertiesFlag:Boolean = false;
      
      mx_internal var invalidateSizeFlag:Boolean = false;
      
      mx_internal var invalidateDisplayListFlag:Boolean = false;
      
      protected var layoutFeatures:AdvancedLayoutFeatures;
      
      private var _x:Number = 0;
      
      private var _y:Number = 0;
      
      private var _alpha:Number = 1;
      
      private var _effectiveAlpha:Number = 1;
      
      private var alphaChanged:Boolean = false;
      
      private var _baseline:Object;
      
      private var _blendMode:String = "auto";
      
      private var blendModeChanged:Boolean;
      
      private var blendShaderChanged:Boolean;
      
      private var blendModeExplicitlySet:Boolean = false;
      
      private var _bottom:Object;
      
      private var _owner:DisplayObjectContainer;
      
      private var _designLayer:DesignLayer;
      
      private var _parent:DisplayObjectContainer;
      
      private var _explicitHeight:Number;
      
      private var _explicitWidth:Number;
      
      private var _filters:Array;
      
      private var filtersChanged:Boolean;
      
      private var _clonedFilters:Array;
      
      mx_internal var _height:Number = 0;
      
      private var _horizontalCenter:Object;
      
      private var _id:String;
      
      private var _left:Object;
      
      private var _mask:DisplayObject;
      
      private var maskChanged:Boolean;
      
      private var _maskType:String = "clip";
      
      private var maskTypeChanged:Boolean;
      
      private var _luminosityInvert:Boolean = false;
      
      private var luminositySettingsChanged:Boolean;
      
      private var _luminosityClip:Boolean = false;
      
      private var _maxHeight:Number;
      
      mx_internal var _maxWidth:Number;
      
      private var _measuredHeight:Number = 0;
      
      private var _measuredWidth:Number = 0;
      
      private var _measuredX:Number = 0;
      
      private var _measuredY:Number = 0;
      
      private var _minHeight:Number;
      
      private var _minWidth:Number;
      
      private var _percentHeight:Number;
      
      private var _percentWidth:Number;
      
      private var _right:Object;
      
      private var _top:Object;
      
      private var _transform:flash.geom.Transform;
      
      private var _verticalCenter:Object;
      
      mx_internal var _width:Number = 0;
      
      private var _visible:Boolean = true;
      
      protected var _effectiveVisibility:Boolean = true;
      
      private var visibleChanged:Boolean;
      
      private var _displayObject:DisplayObject;
      
      private var _includeInLayout:Boolean = true;
      
      private var _displayObjectSharingMode:String;
      
      private var _layoutDirection:String = null;
      
      private var _alwaysCreateDisplayObject:Boolean;
      
      public function GraphicElement()
      {
         method
         name null
         returns null
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         newarray 0
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_filters")
         getlocal0
         constructsuper 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get postLayoutTransformOffsets() : TransformOffsets
      {
         trait getter QName(PackageNamespace(""),"postLayoutTransformOffsets")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("mx.geom"),"TransformOffsets")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushnull
         coerce QName(PackageNamespace("mx.geom"),"TransformOffsets")
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         coerce QName(PackageNamespace("mx.geom"),"TransformOffsets")
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set postLayoutTransformOffsets(param1:TransformOffsets) : void
      {
         trait setter QName(PackageNamespace(""),"postLayoutTransformOffsets")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.geom"),"TransformOffsets")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         pushnull
         ifeq ofs0
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         pushnull
         ifeq ofs1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         getlex QName(PackageNamespace("flash.events"),"Event")
         getproperty QName(PackageNamespace(""),"CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"transformOffsetsChangedHandler")
         callpropvoid QName(PackageNamespace(""),"removeEventListener"), 2
         ofs1:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         pushnull
         ifeq ofs2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         getlex QName(PackageNamespace("flash.events"),"Event")
         getproperty QName(PackageNamespace(""),"CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"transformOffsetsChangedHandler")
         callpropvoid QName(PackageNamespace(""),"addEventListener"), 2
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function allocateLayoutFeatures() : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0
         returnvoid
         ofs0:
         getlocal0
         findpropstrict QName(PackageNamespace("mx.core"),"AdvancedLayoutFeatures")
         constructprop QName(PackageNamespace("mx.core"),"AdvancedLayoutFeatures"), 0
         initproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_x")
         setproperty QName(PackageNamespace(""),"layoutX")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_y")
         setproperty QName(PackageNamespace(""),"layoutY")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         setproperty QName(PackageNamespace(""),"layoutWidth")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function invalidateTransform(param1:Boolean = true, param2:Boolean = true) : void
      {
         trait method QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         optional True()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         iffalse ofs0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushtrue
         setproperty QName(PackageNamespace(""),"updatePending")
         ofs1:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         ifeq ofs2
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         jump ofs3
         ofs2:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         ofs3:
         getlocal2
         iffalse ofs4
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         ofs4:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function transformOffsetsChangedHandler(param1:Event) : void
      {
         trait method QName(PrivateNamespace(null,"#GraphicElement"),"transformOffsetsChangedHandler")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.events"),"Event")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get alpha() : Number
      {
         trait getter QName(PackageNamespace(""),"alpha")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alpha")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set alpha(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"alpha")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alpha")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alpha")
         getlocal0
         getproperty QName(PackageNamespace(""),"designLayer")
         iffalse ofs1
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"designLayer")
         getproperty QName(PackageNamespace(""),"effectiveAlpha")
         multiply
         convert_d
         setlocal1
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_blendMode")
         pushstring "auto"
         ifne ofs2
         getlocal1
         pushbyte 0
         greaterthan
         dup
         iffalse ofs3
         pop
         getlocal1
         pushbyte 1
         lessthan
         ofs3:
         dup
         iffalse ofs4
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_effectiveAlpha")
         pushbyte 0
         equals
         dup
         iftrue ofs4
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_effectiveAlpha")
         pushbyte 1
         equals
         ofs4:
         dup
         iftrue ofs5
         pop
         getlocal1
         pushbyte 0
         equals
         dup
         iftrue ofs6
         pop
         getlocal1
         pushbyte 1
         equals
         ofs6:
         dup
         iffalse ofs5
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_effectiveAlpha")
         pushbyte 0
         greaterthan
         dup
         iffalse ofs5
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_effectiveAlpha")
         pushbyte 1
         lessthan
         ofs5:
         iffalse ofs2
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"blendModeChanged")
         ofs2:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_effectiveAlpha")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_transform")
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal3
         getlocal3
         iffalse ofs7
         getlocal3
         pushfalse
         setproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyColorTransformAlpha")
         ofs7:
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         ifeq ofs8
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs8:
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"alphaChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get baseline() : Object
      {
         trait getter QName(PackageNamespace(""),"baseline")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_baseline")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set baseline(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"baseline")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_baseline")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_baseline")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get baselinePosition() : Number
      {
         trait getter QName(PackageNamespace(""),"baselinePosition")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushbyte 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get blendMode() : String
      {
         trait getter QName(PackageNamespace(""),"blendMode")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_blendMode")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set blendMode(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"blendMode")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_blendMode")
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_blendMode")
         coerce_s
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_blendMode")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"blendModeChanged")
         getlocal0
         getlocal1
         callproperty QName(PrivateNamespace(null,"#GraphicElement"),"isAIMBlendMode"), 1
         iffalse ofs1
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"blendShaderChanged")
         ofs1:
         getlocal2
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         dup
         iftrue ofs2
         pop
         getlocal1
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         ofs2:
         dup
         iffalse ofs3
         pop
         getlocal2
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         dup
         iffalse ofs4
         pop
         getlocal1
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         ofs4:
         not
         ofs3:
         iffalse ofs5
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs5:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get bottom() : Object
      {
         trait getter QName(PackageNamespace(""),"bottom")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_bottom")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set bottom(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"bottom")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_bottom")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_bottom")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get owner() : DisplayObjectContainer
      {
         trait getter QName(PackageNamespace(""),"owner")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_owner")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_owner")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set owner(param1:DisplayObjectContainer) : void
      {
         trait setter QName(PackageNamespace(""),"owner")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_owner")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get designLayer() : DesignLayer
      {
         trait getter QName(PackageNamespace(""),"designLayer")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("mx.core"),"DesignLayer")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_designLayer")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set designLayer(param1:DesignLayer) : void
      {
         trait setter QName(PackageNamespace(""),"designLayer")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.core"),"DesignLayer")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_designLayer")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_designLayer")
         pushstring "layerPropertyChange"
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layer_PropertyChange")
         pushfalse
         callpropvoid QName(PackageNamespace(""),"removeEventListener"), 3
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_designLayer")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_designLayer")
         iffalse ofs1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_designLayer")
         pushstring "layerPropertyChange"
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layer_PropertyChange")
         pushfalse
         pushbyte 0
         pushtrue
         callpropvoid QName(PackageNamespace(""),"addEventListener"), 5
         ofs1:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_designLayer")
         iffalse ofs2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alpha")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_designLayer")
         getproperty QName(PackageNamespace(""),"effectiveAlpha")
         multiply
         convert_d
         jump ofs3
         ofs2:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alpha")
         convert_d
         ofs3:
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_effectiveAlpha")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_designLayer")
         iffalse ofs4
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_visible")
         convert_b
         dup
         iffalse ofs5
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_designLayer")
         getproperty QName(PackageNamespace(""),"effectiveVisibility")
         convert_b
         ofs5:
         jump ofs6
         ofs4:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_visible")
         convert_b
         ofs6:
         initproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"alphaChanged")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"visibleChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get parent() : DisplayObjectContainer
      {
         trait getter QName(PackageNamespace(""),"parent")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_parent")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function parentChanged(param1:Group) : void
      {
         trait method QName(PackageNamespace(""),"parentChanged")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.components"),"Group")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_parent")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateLayoutDirection"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_explicitHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_explicitHeight")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs1
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"percentHeight")
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_explicitHeight")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMaxHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMaxHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitMaxHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitMaxHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"maxHeight")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMaxWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMaxWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitMaxWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitMaxWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"maxWidth")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMinHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMinHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitMinHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitMinHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"minHeight")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitMinWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitMinWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitMinWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitMinWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"minWidth")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get explicitWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"explicitWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_explicitWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set explicitWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"explicitWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_explicitWidth")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs1
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"percentWidth")
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_explicitWidth")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get filters() : Array
      {
         trait getter QName(PackageNamespace(""),"filters")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Array")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_filters")
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"slice"), 0
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set filters(param1:Array) : void
      {
         trait setter QName(PackageNamespace(""),"filters")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Array")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 7
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.events"),"IEventDispatcher")
         setlocal 5
         pushbyte 0
         setlocal2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_filters")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_filters")
         getproperty QName(PackageNamespace(""),"length")
         convert_i
         jump ofs1
         ofs0:
         pushbyte 0
         ofs1:
         convert_i
         setlocal3
         getlocal1
         iffalse ofs2
         getlocal1
         getproperty QName(PackageNamespace(""),"length")
         convert_i
         jump ofs3
         ofs2:
         pushbyte 0
         ofs3:
         convert_i
         setlocal 4
         getlocal3
         pushbyte 0
         equals
         dup
         iffalse ofs4
         pop
         getlocal 4
         pushbyte 0
         equals
         ofs4:
         iffalse ofs5
         returnvoid
         ofs5:
         pushbyte 0
         setlocal2
         jump ofs6
         ofs7:
         label
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_filters")
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"#GraphicElement"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#GraphicElement/1"),PackageNamespace("spark.primitives.supportClasses"),PackageInternalNs("spark.primitives.supportClasses"),StaticProtectedNs("spark.primitives.supportClasses:GraphicElement"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace("flash.events"),"IEventDispatcher")
         astypelate
         coerce QName(PackageNamespace("flash.events"),"IEventDispatcher")
         dup
         setlocal 5
         iffalse ofs8
         getlocal 5
         getlex QName(PackageNamespace("mx.filters"),"BaseFilter")
         getproperty QName(PackageNamespace(""),"CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"filterChangedHandler")
         callpropvoid QName(Namespace("flash.events:IEventDispatcher"),"removeEventListener"), 2
         ofs8:
         inclocal_i 2
         ofs6:
         getlocal2
         getlocal3
         iflt ofs7
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal 6
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_filters")
         getlocal 6
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         ifeq ofs9
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs9:
         getlocal0
         newarray 0
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_clonedFilters")
         pushbyte 0
         setlocal2
         jump ofs10
         ofs11:
         label
         getlocal1
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"#GraphicElement"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#GraphicElement/1"),PackageNamespace("spark.primitives.supportClasses"),PackageInternalNs("spark.primitives.supportClasses"),StaticProtectedNs("spark.primitives.supportClasses:GraphicElement"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace("mx.filters"),"IBitmapFilter")
         istypelate
         iffalse ofs12
         getlocal1
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"#GraphicElement"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#GraphicElement/1"),PackageNamespace("spark.primitives.supportClasses"),PackageInternalNs("spark.primitives.supportClasses"),StaticProtectedNs("spark.primitives.supportClasses:GraphicElement"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         getlex QName(PackageNamespace("flash.events"),"IEventDispatcher")
         astypelate
         coerce QName(PackageNamespace("flash.events"),"IEventDispatcher")
         dup
         setlocal 5
         iffalse ofs13
         getlocal 5
         getlex QName(PackageNamespace("mx.filters"),"BaseFilter")
         getproperty QName(PackageNamespace(""),"CHANGE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"filterChangedHandler")
         callpropvoid QName(Namespace("flash.events:IEventDispatcher"),"addEventListener"), 2
         ofs13:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_clonedFilters")
         findpropstrict QName(PackageNamespace("mx.filters"),"IBitmapFilter")
         getlocal1
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"#GraphicElement"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#GraphicElement/1"),PackageNamespace("spark.primitives.supportClasses"),PackageInternalNs("spark.primitives.supportClasses"),StaticProtectedNs("spark.primitives.supportClasses:GraphicElement"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         callproperty QName(PackageNamespace("mx.filters"),"IBitmapFilter"), 1
         callproperty QName(Namespace("mx.filters:IBitmapFilter"),"clone"), 0
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         jump ofs14
         ofs12:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_clonedFilters")
         getlocal1
         getlocal2
         getproperty MultinameL([PrivateNamespace(null,"#GraphicElement"),Namespace("http://www.adobe.com/2006/flex/mx/internal"),ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),PackageNamespace(""),Namespace("http://adobe.com/AS3/2006/builtin"),PrivateNamespace(null,"#GraphicElement/1"),PackageNamespace("spark.primitives.supportClasses"),PackageInternalNs("spark.primitives.supportClasses"),StaticProtectedNs("spark.primitives.supportClasses:GraphicElement"),StaticProtectedNs("flash.events:EventDispatcher"),StaticProtectedNs("Object")])
         callpropvoid QName(Namespace("http://adobe.com/AS3/2006/builtin"),"push"), 1
         ofs14:
         inclocal_i 2
         ofs10:
         getlocal2
         getlocal 4
         iflt ofs11
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"filtersChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get height() : Number
      {
         trait getter QName(PackageNamespace(""),"height")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set height(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"height")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"explicitHeight")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         convert_d
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal0
         pushstring "height"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get horizontalCenter() : Object
      {
         trait getter QName(PackageNamespace(""),"horizontalCenter")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_horizontalCenter")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set horizontalCenter(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"horizontalCenter")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_horizontalCenter")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_horizontalCenter")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get id() : String
      {
         trait getter QName(PackageNamespace(""),"id")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_id")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set id(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"id")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_id")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get left() : Object
      {
         trait getter QName(PackageNamespace(""),"left")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_left")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set left(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"left")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_left")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_left")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get mask() : DisplayObject
      {
         trait getter QName(PackageNamespace(""),"mask")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set mask(param1:DisplayObject) : void
      {
         trait setter QName(PackageNamespace(""),"mask")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         getlex QName(PackageNamespace("mx.core"),"UIComponent")
         astypelate
         coerce QName(PackageNamespace("mx.core"),"UIComponent")
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         getlocal2
         convert_b
         dup
         iffalse ofs1
         pop
         getlocal2
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$parent")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         strictequals
         ofs1:
         iffalse ofs2
         getlocal2
         getproperty QName(PackageNamespace(""),"parent")
         getlex QName(PackageNamespace("mx.core"),"UIComponent")
         istypelate
         iffalse ofs3
         findpropstrict QName(PackageNamespace("mx.core"),"UIComponent")
         getlocal2
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"UIComponent"), 1
         getlocal2
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"childRemoved"), 1
         ofs3:
         getlocal2
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$parent")
         getlocal2
         callpropvoid QName(PackageNamespace(""),"removeChild"), 1
         ofs2:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         not
         dup
         iftrue ofs4
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         getproperty QName(PackageNamespace(""),"parent")
         convert_b
         ofs4:
         iffalse ofs5
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         iffalse ofs6
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         pushnull
         setproperty QName(PackageNamespace(""),"mask")
         ofs6:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_drawnDisplayObject")
         iffalse ofs5
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_drawnDisplayObject")
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs7
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_drawnDisplayObject")
         getproperty QName(PackageNamespace(""),"parent")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_drawnDisplayObject")
         callpropvoid QName(PackageNamespace(""),"removeChild"), 1
         ofs7:
         getlocal0
         pushnull
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_drawnDisplayObject")
         ofs5:
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"maskChanged")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"maskTypeChanged")
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         ifeq ofs8
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs8:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get maskType() : String
      {
         trait getter QName(PackageNamespace(""),"maskType")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_maskType")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set maskType(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"maskType")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_maskType")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_maskType")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"maskTypeChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get luminosityInvert() : Boolean
      {
         trait getter QName(PackageNamespace(""),"luminosityInvert")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_luminosityInvert")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set luminosityInvert(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"luminosityInvert")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_luminosityInvert")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_luminosityInvert")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"luminositySettingsChanged")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get luminosityClip() : Boolean
      {
         trait getter QName(PackageNamespace(""),"luminosityClip")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_luminosityClip")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set luminosityClip(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"luminosityClip")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_luminosityClip")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_luminosityClip")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"luminositySettingsChanged")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get maxHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"maxHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_maxHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_maxHeight")
         convert_d
         jump ofs1
         ofs0:
         getlex QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MAX_HEIGHT")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set maxHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"maxHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_maxHeight")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_maxHeight")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get maxWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"maxWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_maxWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_maxWidth")
         convert_d
         jump ofs1
         ofs0:
         getlex QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MAX_WIDTH")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set maxWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"maxWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_maxWidth")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_maxWidth")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_measuredHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set measuredHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"measuredHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_measuredHeight")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_measuredWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set measuredWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"measuredWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_measuredWidth")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredX() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_measuredX")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set measuredX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"measuredX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_measuredX")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get measuredY() : Number
      {
         trait getter QName(PackageNamespace(""),"measuredY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_measuredY")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set measuredY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"measuredY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_measuredY")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get minHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"minHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_minHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_minHeight")
         convert_d
         jump ofs1
         ofs0:
         getlex QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MIN_HEIGHT")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set minHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"minHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_minHeight")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_minHeight")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get minWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"minWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_minWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_minWidth")
         convert_d
         jump ofs1
         ofs0:
         getlex QName(PrivateNamespace(null,"#GraphicElement"),"DEFAULT_MIN_WIDTH")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set minWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"minWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_minWidth")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_minWidth")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateSize"), 0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get percentHeight() : Number
      {
         trait getter QName(PackageNamespace(""),"percentHeight")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_percentHeight")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set percentHeight(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"percentHeight")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_percentHeight")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs1
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"explicitHeight")
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_percentHeight")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get percentWidth() : Number
      {
         trait getter QName(PackageNamespace(""),"percentWidth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_percentWidth")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set percentWidth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"percentWidth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_percentWidth")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs1
         getlocal0
         getlex QName(PackageNamespace(""),"NaN")
         initproperty QName(PackageNamespace(""),"explicitWidth")
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_percentWidth")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get right() : Object
      {
         trait getter QName(PackageNamespace(""),"right")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_right")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set right(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"right")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_right")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_right")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get rotationX() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 0
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationX")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set rotationX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"rotationX")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutRotationX")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get rotationY() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 0
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationY")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set rotationY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"rotationY")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutRotationY")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get rotationZ() : Number
      {
         trait getter QName(PackageNamespace(""),"rotationZ")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 0
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationZ")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set rotationZ(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotationZ")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"rotationZ")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutRotationZ")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get rotation() : Number
      {
         trait getter QName(PackageNamespace(""),"rotation")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 0
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationZ")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set rotation(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"rotation")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"rotationZ")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleX() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 1
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleX")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleX")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutScaleX")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleY() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 1
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleY")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleY")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutScaleY")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get scaleZ() : Number
      {
         trait getter QName(PackageNamespace(""),"scaleZ")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 1
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleZ")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set scaleZ(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"scaleZ")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"scaleZ")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutScaleZ")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get top() : Object
      {
         trait getter QName(PackageNamespace(""),"top")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_top")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set top(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"top")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_top")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_top")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get transform() : flash.geom.Transform
      {
         trait getter QName(PackageNamespace(""),"transform")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.geom"),"Transform")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_transform")
         iftrue ofs0
         getlocal0
         findpropstrict QName(PackageNamespace("mx.geom"),"Transform")
         constructprop QName(PackageNamespace("mx.geom"),"Transform"), 0
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"setTransform"), 1
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_transform")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set transform(param1:flash.geom.Transform) : void
      {
         trait setter QName(PackageNamespace(""),"transform")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Transform")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 7
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"matrix")
         convert_b
         ofs0:
         iffalse ofs1
         getlocal1
         getproperty QName(PackageNamespace(""),"matrix")
         callproperty QName(PackageNamespace(""),"clone"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         jump ofs2
         ofs1:
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         ofs2:
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal2
         getlocal1
         convert_b
         dup
         iffalse ofs3
         pop
         getlocal1
         getproperty QName(PackageNamespace(""),"matrix3D")
         convert_b
         ofs3:
         iffalse ofs4
         getlocal1
         getproperty QName(PackageNamespace(""),"matrix3D")
         callproperty QName(PackageNamespace(""),"clone"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         jump ofs5
         ofs4:
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         ofs5:
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal3
         getlocal1
         iffalse ofs6
         getlocal1
         getproperty QName(PackageNamespace(""),"colorTransform")
         coerce QName(PackageNamespace("flash.geom"),"ColorTransform")
         jump ofs7
         ofs6:
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"ColorTransform")
         ofs7:
         coerce QName(PackageNamespace("flash.geom"),"ColorTransform")
         setlocal 4
         getlocal1
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         dup
         setlocal 5
         iffalse ofs8
         getlocal 5
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyMatrix")
         iftrue ofs9
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal2
         ofs9:
         getlocal 5
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyMatrix3D")
         iftrue ofs8
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal3
         ofs8:
         getlocal0
         getlocal1
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"setTransform"), 1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal 6
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_transform")
         iffalse ofs10
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal2
         pushnull
         ifeq ofs11
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal2
         setproperty QName(PackageNamespace(""),"layoutMatrix")
         jump ofs10
         ofs11:
         getlocal3
         pushnull
         ifeq ofs10
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal3
         setproperty QName(PackageNamespace(""),"layoutMatrix3D")
         ofs10:
         getlocal0
         getlocal 4
         getlocal 5
         convert_b
         dup
         iffalse ofs12
         pop
         getlocal 5
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyColorTransformAlpha")
         convert_b
         ofs12:
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"applyColorTransform"), 2
         getlocal0
         getlocal 6
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function setTransform(param1:flash.geom.Transform) : void
      {
         trait method QName(PrivateNamespace(null,"#GraphicElement"),"setTransform")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Transform")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_transform")
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal2
         getlocal2
         iffalse ofs0
         getlocal2
         pushnull
         setproperty QName(PackageNamespace(""),"target")
         ofs0:
         getlocal1
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal3
         getlocal3
         iffalse ofs1
         getlocal3
         getlocal0
         setproperty QName(PackageNamespace(""),"target")
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_transform")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setColorTransform(param1:ColorTransform) : void
      {
         trait method QName(PackageNamespace(""),"setColorTransform")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"ColorTransform")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         pushtrue
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"applyColorTransform"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function applyColorTransform(param1:ColorTransform, param2:Boolean) : void
      {
         trait method QName(PrivateNamespace(null,"#GraphicElement"),"applyColorTransform")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"ColorTransform")
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 10
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal3
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_colorTransform")
         getlocal1
         ifeq ofs0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlocal0
         findpropstrict QName(PackageNamespace("flash.geom"),"ColorTransform")
         getlocal1
         getproperty QName(PackageNamespace(""),"redMultiplier")
         getlocal1
         getproperty QName(PackageNamespace(""),"greenMultiplier")
         getlocal1
         getproperty QName(PackageNamespace(""),"blueMultiplier")
         getlocal1
         getproperty QName(PackageNamespace(""),"alphaMultiplier")
         getlocal1
         getproperty QName(PackageNamespace(""),"redOffset")
         getlocal1
         getproperty QName(PackageNamespace(""),"greenOffset")
         getlocal1
         getproperty QName(PackageNamespace(""),"blueOffset")
         getlocal1
         getproperty QName(PackageNamespace(""),"alphaOffset")
         constructprop QName(PackageNamespace("flash.geom"),"ColorTransform"), 8
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_colorTransform")
         getlocal2
         iffalse ofs1
         getlocal0
         getlocal1
         getproperty QName(PackageNamespace(""),"alphaMultiplier")
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alpha")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alpha")
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_effectiveAlpha")
         ofs1:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         convert_b
         dup
         iffalse ofs2
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         equals
         ofs2:
         iffalse ofs3
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_colorTransform")
         setproperty QName(PackageNamespace(""),"colorTransform")
         jump ofs0
         ofs3:
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"colorTransformChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         ifeq ofs0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function isAIMBlendMode(param1:String) : Boolean
      {
         trait method QName(PrivateNamespace(null,"#GraphicElement"),"isAIMBlendMode")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         pushstring "colordodge"
         equals
         dup
         iftrue ofs0
         pop
         getlocal1
         pushstring "colorburn"
         equals
         ofs0:
         dup
         iftrue ofs1
         pop
         getlocal1
         pushstring "exclusion"
         equals
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal1
         pushstring "softlight"
         equals
         ofs2:
         dup
         iftrue ofs3
         pop
         getlocal1
         pushstring "hue"
         equals
         ofs3:
         dup
         iftrue ofs4
         pop
         getlocal1
         pushstring "saturation"
         equals
         ofs4:
         dup
         iftrue ofs5
         pop
         getlocal1
         pushstring "color"
         equals
         ofs5:
         dup
         iftrue ofs6
         pop
         getlocal1
         pushstring "luminosity"
         equals
         ofs6:
         iffalse ofs7
         pushtrue
         returnvalue
         ofs7:
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function transformAround(param1:Vector3D, param2:Vector3D = null, param3:Vector3D = null, param4:Vector3D = null, param5:Vector3D = null, param6:Vector3D = null, param7:Vector3D = null, param8:Boolean = true) : void
      {
         trait method QName(PackageNamespace(""),"transformAround")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace(""),"Boolean")
         optional Null()
         optional Null()
         optional Null()
         optional Null()
         optional Null()
         optional Null()
         optional True()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 8
         localcount 13
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal 9
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutX")
         convert_d
         setlocal 10
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutY")
         convert_d
         setlocal 11
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutZ")
         convert_d
         setlocal 12
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         getlocal2
         getlocal3
         getlocal 4
         getlocal 5
         getlocal 6
         getlocal 7
         callpropvoid QName(PackageNamespace(""),"transformAround"), 7
         getlocal0
         getlocal 9
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         getlocal 8
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 2
         getlocal 10
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutX")
         ifeq ofs0
         getlocal0
         pushstring "x"
         getlocal 10
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutX")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs0:
         getlocal 11
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutY")
         ifeq ofs1
         getlocal0
         pushstring "y"
         getlocal 11
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutY")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs1:
         getlocal 12
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutZ")
         ifeq ofs2
         getlocal0
         pushstring "z"
         getlocal 12
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutZ")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function transformPointToParent(param1:Vector3D, param2:Vector3D, param3:Vector3D) : void
      {
         trait method QName(PackageNamespace(""),"transformPointToParent")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         param QName(PackageNamespace("flash.geom"),"Vector3D")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 5
         localcount 5
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushtrue
         getlocal1
         getlocal2
         getlocal3
         callpropvoid QName(PackageNamespace(""),"transformPointToParent"), 4
         jump ofs1
         ofs0:
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 0
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlocal1
         iffalse ofs2
         getlocal 4
         getlocal1
         getproperty QName(PackageNamespace(""),"x")
         setproperty QName(PackageNamespace(""),"x")
         getlocal 4
         getlocal1
         getproperty QName(PackageNamespace(""),"y")
         setproperty QName(PackageNamespace(""),"y")
         ofs2:
         getlocal2
         pushnull
         ifeq ofs3
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_x")
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_y")
         add
         setproperty QName(PackageNamespace(""),"y")
         getlocal2
         pushbyte 0
         setproperty QName(PackageNamespace(""),"z")
         ofs3:
         getlocal3
         pushnull
         ifeq ofs1
         getlocal3
         getlocal 4
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_x")
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal3
         getlocal 4
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_y")
         add
         setproperty QName(PackageNamespace(""),"y")
         getlocal3
         pushbyte 0
         setproperty QName(PackageNamespace(""),"z")
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get transformX() : Number
      {
         trait getter QName(PackageNamespace(""),"transformX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 0
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"transformX")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set transformX(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"transformX")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"transformX")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"transformX")
         getlocal0
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get transformY() : Number
      {
         trait getter QName(PackageNamespace(""),"transformY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 0
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"transformY")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set transformY(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"transformY")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"transformY")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"transformY")
         getlocal0
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get transformZ() : Number
      {
         trait getter QName(PackageNamespace(""),"transformZ")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 0
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"transformZ")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set transformZ(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"transformZ")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"transformZ")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"transformZ")
         getlocal0
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get verticalCenter() : Object
      {
         trait getter QName(PackageNamespace(""),"verticalCenter")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Object")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_verticalCenter")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set verticalCenter(param1:Object) : void
      {
         trait setter QName(PackageNamespace(""),"verticalCenter")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_verticalCenter")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_verticalCenter")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get width() : Number
      {
         trait getter QName(PackageNamespace(""),"width")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set width(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"width")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PackageNamespace(""),"explicitWidth")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         convert_d
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         iffalse ofs1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutWidth")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 0
         ofs1:
         getlocal0
         pushstring "width"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get depth() : Number
      {
         trait getter QName(PackageNamespace(""),"depth")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 0
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"depth")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set depth(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"depth")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"depth")
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"depth")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_parent")
         getlex QName(PackageNamespace("mx.core"),"UIComponent")
         istypelate
         iffalse ofs1
         findpropstrict QName(PackageNamespace("mx.core"),"UIComponent")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_parent")
         callproperty QName(PackageNamespace("mx.core"),"UIComponent"), 1
         callpropvoid QName(PackageNamespace(""),"invalidateLayering"), 0
         ofs1:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get x() : Number
      {
         trait getter QName(PackageNamespace(""),"x")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_x")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutX")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set x(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"x")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal2
         getlocal2
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutX")
         jump ofs2
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_x")
         ofs2:
         getlocal0
         pushstring "x"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         getlocal0
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get y() : Number
      {
         trait getter QName(PackageNamespace(""),"y")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_y")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutY")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set y(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"y")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal2
         getlocal2
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutY")
         jump ofs2
         ofs1:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_y")
         ofs2:
         getlocal0
         pushstring "y"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         getlocal0
         pushfalse
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get z() : Number
      {
         trait getter QName(PackageNamespace(""),"z")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs0
         pushbyte 0
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutZ")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set z(param1:Number) : void
      {
         trait setter QName(PackageNamespace(""),"z")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"z")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"z")
         convert_d
         setlocal2
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutZ")
         getlocal0
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         getlocal0
         pushstring "z"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get visible() : Boolean
      {
         trait getter QName(PackageNamespace(""),"visible")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_visible")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set visible(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"visible")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_visible")
         getlocal0
         getproperty QName(PackageNamespace(""),"designLayer")
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"designLayer")
         getproperty QName(PackageNamespace(""),"effectiveVisibility")
         not
         ofs0:
         iffalse ofs1
         pushfalse
         setlocal1
         ofs1:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         getlocal1
         ifne ofs2
         returnvoid
         ofs2:
         getlocal0
         getlocal1
         initproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"visibleChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      [Bindable("propertyChange")]
      public function get displayObject() : DisplayObject
      {
         trait getter QName(PackageNamespace(""),"displayObject")
         flag METADATA
         metadata "Bindable"
         item null "propertyChange"
         end ; metadata
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_displayObject")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function setDisplayObject(param1:DisplayObject) : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"setDisplayObject")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_displayObject")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_displayObject")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal2
         getlocal2
         convert_b
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         equals
         ofs1:
         iffalse ofs2
         getlocal2
         getproperty QName(PackageNamespace(""),"transform")
         pushnull
         setproperty QName(PackageNamespace(""),"matrix3D")
         ofs2:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_displayObject")
         getlocal0
         pushstring "displayObject"
         getlocal2
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"displayObjectChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function get drawX() : Number
      {
         trait getter QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawX")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         ifne ofs0
         pushbyte 0
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         not
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         pushnull
         equals
         not
         ofs1:
         iffalse ofs2
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         ofs2:
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function get drawY() : Number
      {
         trait getter QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawY")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         ifne ofs0
         pushbyte 0
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         not
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         pushnull
         equals
         not
         ofs1:
         iffalse ofs2
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         ofs2:
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function get hasComplexLayoutMatrix() : Boolean
      {
         trait getter QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         iffalse ofs0
         pushfalse
         jump ofs1
         ofs0:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PackageNamespace(""),"isDeltaIdentity"), 1
         not
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get includeInLayout() : Boolean
      {
         trait getter QName(PackageNamespace(""),"includeInLayout")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_includeInLayout")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set includeInLayout(param1:Boolean) : void
      {
         trait setter QName(PackageNamespace(""),"includeInLayout")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_includeInLayout")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_includeInLayout")
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_includeInLayout")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function set displayObjectSharingMode(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"displayObjectSharingMode")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_displayObjectSharingMode")
         ifne ofs0
         returnvoid
         ofs0:
         getlocal1
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         not
         dup
         iftrue ofs1
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         not
         ofs1:
         iffalse ofs2
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"displayObjectChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         ofs2:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_displayObjectSharingMode")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get displayObjectSharingMode() : String
      {
         trait getter QName(PackageNamespace(""),"displayObjectSharingMode")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_displayObjectSharingMode")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get layoutDirection() : String
      {
         trait getter QName(PackageNamespace(""),"layoutDirection")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_layoutDirection")
         pushnull
         ifeq ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_layoutDirection")
         returnvalue
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         getlex QName(PackageNamespace("mx.core"),"ILayoutDirectionElement")
         astypelate
         coerce QName(PackageNamespace("mx.core"),"ILayoutDirectionElement")
         setlocal1
         getlocal1
         iffalse ofs1
         getlocal1
         getproperty QName(Namespace("mx.core:ILayoutDirectionElement"),"layoutDirection")
         coerce_s
         jump ofs2
         ofs1:
         getlex QName(PackageNamespace("mx.core"),"LayoutDirection")
         getproperty QName(PackageNamespace(""),"LTR")
         coerce_s
         ofs2:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function set layoutDirection(param1:String) : void
      {
         trait setter QName(PackageNamespace(""),"layoutDirection")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_layoutDirection")
         getlocal1
         ifne ofs0
         returnvoid
         ofs0:
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_layoutDirection")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateLayoutDirection"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateLayoutDirection() : void
      {
         trait method QName(PackageNamespace(""),"invalidateLayoutDirection")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         getlex QName(PackageNamespace("mx.core"),"ILayoutDirectionElement")
         astypelate
         coerce QName(PackageNamespace("mx.core"),"ILayoutDirectionElement")
         setlocal1
         getlocal1
         iftrue ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_layoutDirection")
         pushnull
         equals
         not
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_layoutDirection")
         getlocal1
         getproperty QName(Namespace("mx.core:ILayoutDirectionElement"),"layoutDirection")
         equals
         not
         ofs1:
         convert_b
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         iffalse ofs2
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"mirror")
         equals
         not
         jump ofs3
         ofs2:
         getlocal2
         convert_b
         ofs3:
         iffalse ofs4
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifne ofs5
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         ofs5:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal2
         setproperty QName(PackageNamespace(""),"mirror")
         getlocal0
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 1
         ofs4:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function initialized(param1:Object, param2:String) : void
      {
         trait method QName(PackageNamespace(""),"initialized")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Object")
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal2
         setproperty QName(PackageNamespace(""),"id")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function localToGlobal(param1:Point) : Point
      {
         trait method QName(PackageNamespace(""),"localToGlobal")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Point")
         returns QName(PackageNamespace("flash.geom"),"Point")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         not
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"parent")
         not
         ofs0:
         iffalse ofs1
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         returnvalue
         ofs1:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal1
         callproperty QName(PackageNamespace(""),"localToGlobal"), 1
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         iftrue ofs2
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawX")
         add
         setproperty QName(PackageNamespace(""),"x")
         getlocal2
         getlocal2
         getproperty QName(PackageNamespace(""),"y")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawY")
         add
         setproperty QName(PackageNamespace(""),"y")
         ofs2:
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function createDisplayObject() : DisplayObject
      {
         trait method QName(PackageNamespace(""),"createDisplayObject")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         findpropstrict QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite")
         constructprop QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite"), 0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"setDisplayObject"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function set alwaysCreateDisplayObject(param1:Boolean) : void
      {
         trait setter QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"alwaysCreateDisplayObject")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal2
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alwaysCreateDisplayObject")
         ifeq ofs0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal2
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alwaysCreateDisplayObject")
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         ifeq ofs0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function get alwaysCreateDisplayObject() : Boolean
      {
         trait getter QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"alwaysCreateDisplayObject")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alwaysCreateDisplayObject")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function get needsDisplayObject() : Boolean
      {
         trait getter QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.geom"),"TransformOffsets")
         setlocal2
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"alwaysCreateDisplayObject")
         coerce_a
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_filters")
         coerce_a
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_filters")
         getproperty QName(PackageNamespace(""),"length")
         pushbyte 0
         greaterthan
         coerce_a
         ofs1:
         coerce_a
         ofs0:
         coerce_a
         dup
         iftrue ofs2
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_blendMode")
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         equals
         not
         dup
         iffalse ofs3
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_blendMode")
         pushstring "auto"
         equals
         not
         ofs3:
         coerce_a
         ofs2:
         coerce_a
         dup
         iftrue ofs4
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         coerce_a
         ofs4:
         coerce_a
         dup
         iftrue ofs5
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         not
         dup
         iffalse ofs6
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleX")
         pushbyte 1
         equals
         not
         dup
         iftrue ofs7
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleY")
         pushbyte 1
         equals
         not
         ofs7:
         dup
         iftrue ofs8
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutScaleZ")
         pushbyte 1
         equals
         not
         ofs8:
         dup
         iftrue ofs9
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationX")
         pushbyte 0
         equals
         not
         ofs9:
         dup
         iftrue ofs10
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationY")
         pushbyte 0
         equals
         not
         ofs10:
         dup
         iftrue ofs11
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutRotationZ")
         pushbyte 0
         equals
         not
         ofs11:
         dup
         iftrue ofs12
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutZ")
         pushbyte 0
         equals
         not
         ofs12:
         dup
         iftrue ofs6
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"mirror")
         ofs6:
         coerce_a
         ofs5:
         convert_b
         dup
         iftrue ofs13
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_colorTransform")
         pushnull
         equals
         not
         ofs13:
         dup
         iftrue ofs14
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_effectiveAlpha")
         pushbyte 1
         equals
         not
         ofs14:
         convert_b
         setlocal1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         not
         dup
         iffalse ofs15
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         pushnull
         equals
         not
         ofs15:
         iffalse ofs16
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"postLayoutTransformOffsets")
         coerce QName(PackageNamespace("mx.geom"),"TransformOffsets")
         setlocal2
         getlocal1
         convert_b
         dup
         iftrue ofs17
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"scaleX")
         pushbyte 1
         equals
         not
         dup
         iftrue ofs18
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"scaleY")
         pushbyte 1
         equals
         not
         ofs18:
         dup
         iftrue ofs19
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"scaleZ")
         pushbyte 1
         equals
         not
         ofs19:
         dup
         iftrue ofs20
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"rotationX")
         pushbyte 0
         equals
         not
         ofs20:
         dup
         iftrue ofs21
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"rotationY")
         pushbyte 0
         equals
         not
         ofs21:
         dup
         iftrue ofs22
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"rotationZ")
         pushbyte 0
         equals
         not
         ofs22:
         dup
         iftrue ofs17
         pop
         getlocal2
         getproperty QName(PackageNamespace(""),"z")
         pushbyte 0
         equals
         not
         ofs17:
         convert_b
         setlocal1
         ofs16:
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setSharedDisplayObject(param1:DisplayObject) : Boolean
      {
         trait method QName(PackageNamespace(""),"setSharedDisplayObject")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.display"),"DisplayObject")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlex QName(PackageNamespace("flash.display"),"Sprite")
         istypelate
         not
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alwaysCreateDisplayObject")
         convert_b
         ofs0:
         dup
         iftrue ofs1
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         ofs1:
         iffalse ofs2
         pushfalse
         returnvalue
         ofs2:
         getlocal0
         getlocal1
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"setDisplayObject"), 1
         pushtrue
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function canShareWithPrevious(param1:IGraphicElement) : Boolean
      {
         trait method QName(PackageNamespace(""),"canShareWithPrevious")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlex QName(PackageNamespace("spark.primitives.supportClasses"),"GraphicElement")
         istypelate
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function canShareWithNext(param1:IGraphicElement) : Boolean
      {
         trait method QName(PackageNamespace(""),"canShareWithNext")
         dispid 0
         method
         name null
         param QName(PackageNamespace("spark.core"),"IGraphicElement")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         getlex QName(PackageNamespace("spark.primitives.supportClasses"),"GraphicElement")
         istypelate
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alwaysCreateDisplayObject")
         not
         ofs0:
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         not
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function get drawnDisplayObject() : DisplayObject
      {
         trait getter QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.display"),"DisplayObject")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_drawnDisplayObject")
         iffalse ofs0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_drawnDisplayObject")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function captureBitmapData(param1:Boolean = true, param2:uint = 4294967295, param3:Boolean = true, param4:Rectangle = null) : BitmapData
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"captureBitmapData")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace(""),"uint")
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace("flash.geom"),"Rectangle")
         optional True()
         optional Double(4294967295)
         optional True()
         optional Null()
         returns QName(PackageNamespace("flash.display"),"BitmapData")
         
         body
         maxstack 6
         localcount 11
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal 5
         pushnull
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal 6
         pushnull
         coerce QName(PackageNamespace("flash.display"),"Sprite")
         setlocal 7
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 8
         pushnull
         coerce QName(PackageNamespace("flash.display"),"BitmapData")
         setlocal 9
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal 10
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         not
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"is3D")
         not
         ofs0:
         iffalse ofs1
         pushfalse
         setlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         not
         dup
         iftrue ofs2
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         equals
         not
         ofs2:
         iffalse ofs3
         pushtrue
         setlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         coerce QName(PackageNamespace("flash.display"),"DisplayObject")
         setlocal 6
         getlocal0
         findpropstrict QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite")
         constructprop QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite"), 0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"setDisplayObject"), 1
         findpropstrict QName(PackageNamespace("mx.core"),"UIComponent")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"UIComponent"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$addChild"), 1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"validateDisplayList"), 0
         ofs3:
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         findpropstrict QName(PackageNamespace("mx.core"),"IUIComponent")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"IUIComponent"), 1
         getproperty QName(Namespace("mx.core:IUIComponent"),"systemManager")
         callproperty QName(Namespace("mx.managers:ISystemManager"),"getSandboxRoot"), 0
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         coerce QName(PackageNamespace("flash.display"),"Sprite")
         setlocal 7
         getlocal3
         iffalse ofs4
         findpropstrict QName(PackageNamespace("flash.geom"),"Rectangle")
         getlocal0
         callproperty QName(PackageNamespace(""),"getLayoutBoundsX"), 0
         getlocal0
         callproperty QName(PackageNamespace(""),"getLayoutBoundsY"), 0
         getlocal0
         callproperty QName(PackageNamespace(""),"getLayoutBoundsWidth"), 0
         getlocal0
         callproperty QName(PackageNamespace(""),"getLayoutBoundsHeight"), 0
         constructprop QName(PackageNamespace("flash.geom"),"Rectangle"), 4
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         jump ofs5
         ofs4:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 7
         callproperty QName(PackageNamespace(""),"getBounds"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         ofs5:
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 8
         findpropstrict QName(PackageNamespace("flash.display"),"BitmapData")
         getlex QName(PackageNamespace(""),"Math")
         getlocal 8
         getproperty QName(PackageNamespace(""),"width")
         callproperty QName(PackageNamespace(""),"ceil"), 1
         getlex QName(PackageNamespace(""),"Math")
         getlocal 8
         getproperty QName(PackageNamespace(""),"height")
         callproperty QName(PackageNamespace(""),"ceil"), 1
         getlocal1
         getlocal2
         constructprop QName(PackageNamespace("flash.display"),"BitmapData"), 4
         coerce QName(PackageNamespace("flash.display"),"BitmapData")
         setlocal 9
         getlocal3
         iffalse ofs6
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getproperty QName(PackageNamespace(""),"matrix")
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         jump ofs7
         ofs6:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace(""),"getConcatenatedMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         ofs7:
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         dup
         setlocal 10
         iffalse ofs8
         getlocal 10
         getlocal 8
         getproperty QName(PackageNamespace(""),"x")
         negate
         getlocal 8
         getproperty QName(PackageNamespace(""),"y")
         negate
         callpropvoid QName(PackageNamespace(""),"translate"), 2
         ofs8:
         getlocal 9
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 10
         pushnull
         pushnull
         getlocal 4
         callpropvoid QName(PackageNamespace(""),"draw"), 5
         getlocal 5
         iffalse ofs9
         findpropstrict QName(PackageNamespace("mx.core"),"UIComponent")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"UIComponent"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$removeChild"), 1
         getlocal0
         getlocal 6
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"setDisplayObject"), 1
         ofs9:
         getlocal 9
         returnvalue
         jump ofs1
         ofs1:
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         callproperty QName(PrivateNamespace(null,"#GraphicElement"),"get3DSnapshot"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function get3DSnapshot(param1:Boolean = true, param2:uint = 4294967295, param3:Boolean = true) : BitmapData
      {
         trait method QName(PrivateNamespace(null,"#GraphicElement"),"get3DSnapshot")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         param QName(PackageNamespace(""),"uint")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         optional Double(4294967295)
         optional True()
         returns QName(PackageNamespace("flash.display"),"BitmapData")
         
         body
         maxstack 7
         localcount 15
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         findpropstrict QName(PackageNamespace("mx.core"),"IUIComponent")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"IUIComponent"), 1
         getproperty QName(Namespace("mx.core:IUIComponent"),"systemManager")
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         coerce QName(PackageNamespace("flash.display"),"Sprite")
         setlocal 4
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"parent")
         coerce QName(PackageNamespace("flash.display"),"DisplayObjectContainer")
         setlocal 5
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         constructprop QName(PackageNamespace("flash.display"),"Sprite"), 0
         coerce QName(PackageNamespace("flash.display"),"Sprite")
         setlocal 6
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 4
         callproperty QName(PackageNamespace(""),"getBounds"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 7
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 5
         callproperty QName(PackageNamespace(""),"getBounds"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 8
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getproperty QName(PackageNamespace(""),"matrix3D")
         callproperty QName(PackageNamespace(""),"clone"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal 9
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal 4
         callproperty QName(PackageNamespace(""),"getRelativeMatrix3D"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal 10
         getlocal 9
         callproperty QName(PackageNamespace(""),"clone"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal 11
         getlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace(""),"getChildIndex"), 1
         convert_i
         setlocal 12
         getlocal 5
         getlex QName(PackageNamespace("spark.components"),"Group")
         istypelate
         iffalse ofs0
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal 5
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$removeChild"), 1
         jump ofs1
         ofs0:
         getlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(PackageNamespace(""),"removeChild"), 1
         ofs1:
         getlocal 4
         getlocal 6
         callpropvoid QName(PackageNamespace(""),"addChild"), 1
         getlocal 6
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(PackageNamespace(""),"addChild"), 1
         getlocal3
         iffalse ofs2
         getlocal 11
         getlocal 10
         getproperty QName(PackageNamespace(""),"position")
         setproperty QName(PackageNamespace(""),"position")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal 11
         setproperty QName(PackageNamespace(""),"matrix3D")
         jump ofs3
         ofs2:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal 10
         setproperty QName(PackageNamespace(""),"matrix3D")
         ofs3:
         findpropstrict QName(PackageNamespace("flash.geom"),"Matrix")
         constructprop QName(PackageNamespace("flash.geom"),"Matrix"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         dup
         setlocal 13
         getlocal 7
         getproperty QName(PackageNamespace(""),"left")
         negate
         getlocal 7
         getproperty QName(PackageNamespace(""),"top")
         negate
         callpropvoid QName(PackageNamespace(""),"translate"), 2
         findpropstrict QName(PackageNamespace("flash.display"),"BitmapData")
         getlocal 7
         getproperty QName(PackageNamespace(""),"width")
         getlocal 7
         getproperty QName(PackageNamespace(""),"height")
         getlocal1
         getlocal2
         constructprop QName(PackageNamespace("flash.display"),"BitmapData"), 4
         coerce QName(PackageNamespace("flash.display"),"BitmapData")
         dup
         setlocal 14
         getlocal 6
         getlocal 13
         pushnull
         pushnull
         pushnull
         pushtrue
         callpropvoid QName(PackageNamespace(""),"draw"), 6
         getlocal 6
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callpropvoid QName(PackageNamespace(""),"removeChild"), 1
         getlocal 4
         getlocal 6
         callpropvoid QName(PackageNamespace(""),"removeChild"), 1
         getlocal 5
         getlex QName(PackageNamespace("spark.components"),"Group")
         istypelate
         iffalse ofs4
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal 5
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 12
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"$addChildAt"), 2
         jump ofs5
         ofs4:
         getlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal 12
         callpropvoid QName(PackageNamespace(""),"addChildAt"), 2
         ofs5:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal 9
         setproperty QName(PackageNamespace(""),"matrix3D")
         getlocal 14
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function layer_PropertyChange(param1:PropertyChangeEvent) : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layer_PropertyChange")
         dispid 0
         method
         name null
         param QName(PackageNamespace("mx.events"),"PropertyChangeEvent")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 6
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushfalse
         setlocal2
         pushnan
         setlocal3
         pushnull
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal 4
         jump ofs0
         ofs1:
         label
         getlocal1
         getproperty QName(PackageNamespace(""),"newValue")
         convert_b
         dup
         iffalse ofs2
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_visible")
         convert_b
         ofs2:
         convert_b
         setlocal2
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         ifeq ofs3
         getlocal0
         getlocal2
         initproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"visibleChanged")
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         ofs3:
         jump ofs4
         ofs5:
         label
         findpropstrict QName(PackageNamespace(""),"Number")
         getlocal1
         getproperty QName(PackageNamespace(""),"newValue")
         callproperty QName(PackageNamespace(""),"Number"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_alpha")
         multiply
         convert_d
         setlocal3
         getlocal3
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_effectiveAlpha")
         ifeq ofs6
         getlocal0
         getlocal3
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_effectiveAlpha")
         getlocal0
         pushtrue
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"alphaChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_transform")
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         dup
         setlocal 4
         iffalse ofs7
         getlocal 4
         pushfalse
         setproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyColorTransformAlpha")
         ofs7:
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing"), 0
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateProperties"), 0
         ofs6:
         jump ofs4
         ofs8:
         label
         jump ofs4
         ofs0:
         getlocal1
         getproperty QName(PackageNamespace(""),"property")
         setlocal 5
         pushstring "effectiveVisibility"
         getlocal 5
         ifstrictne ofs9
         pushbyte 0
         jump ofs10
         ofs9:
         pushstring "effectiveAlpha"
         getlocal 5
         ifstrictne ofs11
         pushbyte 1
         jump ofs10
         ofs11:
         jump ofs12
         pushbyte 2
         jump ofs12
         ofs12:
         pushbyte 2
         ofs10:
         kill 5
         lookupswitch ofs8, [ofs1, ofs5, ofs8]
         ofs4:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function dispatchPropertyChangeEvent(param1:String, param2:*, param3:*) : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         param null
         param null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"hasEventListener")
         pushstring "propertyChange"
         callproperty QName(PackageNamespace(""),"hasEventListener"), 1
         iffalse ofs0
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         getlex QName(PackageNamespace("mx.events"),"PropertyChangeEvent")
         getlocal0
         getlocal1
         getlocal2
         getlocal3
         callproperty QName(PackageNamespace(""),"createUpdateEvent"), 4
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function invalidateDisplayObjectSharing() : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateDisplayObjectSharing")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs0
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateGraphicElementSharing"), 1
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateProperties() : void
      {
         trait method QName(PackageNamespace(""),"invalidateProperties")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         iffalse ofs0
         returnvoid
         ofs0:
         getlocal0
         pushtrue
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs1
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateGraphicElementProperties"), 1
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateSize() : void
      {
         trait method QName(PackageNamespace(""),"invalidateSize")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         iffalse ofs0
         returnvoid
         ofs0:
         getlocal0
         pushtrue
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs1
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateGraphicElementSize"), 1
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function invalidateParentSizeAndDisplayList() : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"includeInLayout")
         iftrue ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         convert_b
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         getlex QName(PackageNamespace("mx.core"),"IInvalidating")
         istypelate
         ofs1:
         iffalse ofs2
         findpropstrict QName(PackageNamespace("mx.core"),"IInvalidating")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"IInvalidating"), 1
         callpropvoid QName(Namespace("mx.core:IInvalidating"),"invalidateSize"), 0
         findpropstrict QName(PackageNamespace("mx.core"),"IInvalidating")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.core"),"IInvalidating"), 1
         callpropvoid QName(Namespace("mx.core:IInvalidating"),"invalidateDisplayList"), 0
         ofs2:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function invalidateDisplayList() : void
      {
         trait method QName(PackageNamespace(""),"invalidateDisplayList")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         iffalse ofs0
         returnvoid
         ofs0:
         getlocal0
         pushtrue
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs1
         findpropstrict QName(PackageNamespace("spark.components"),"Group")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("spark.components"),"Group"), 1
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateGraphicElementDisplayList"), 1
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function validateNow() : void
      {
         trait method QName(PackageNamespace(""),"validateNow")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         iffalse ofs0
         getlex QName(PackageNamespace("mx.core"),"UIComponentGlobals")
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"layoutManager")
         findpropstrict QName(PackageNamespace("mx.managers"),"ILayoutManagerClient")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callproperty QName(PackageNamespace("mx.managers"),"ILayoutManagerClient"), 1
         callpropvoid QName(Namespace("mx.managers:ILayoutManager"),"validateClient"), 1
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function validateProperties() : void
      {
         trait method QName(PackageNamespace(""),"validateProperties")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         iftrue ofs0
         returnvoid
         ofs0:
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"commitProperties"), 0
         getlocal0
         pushfalse
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         not
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         not
         ofs1:
         dup
         iffalse ofs2
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         not
         ofs2:
         iffalse ofs3
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"dispatchUpdateComplete"), 0
         ofs3:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function commitProperties() : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"commitProperties")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 6
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal2
         pushfalse
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         not
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         convert_b
         ofs0:
         iffalse ofs1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"colorTransformChanged")
         convert_b
         dup
         iftrue ofs2
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"displayObjectChanged")
         convert_b
         ofs2:
         iffalse ofs3
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"colorTransformChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_colorTransform")
         iffalse ofs3
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_colorTransform")
         setproperty QName(PackageNamespace(""),"colorTransform")
         ofs3:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"alphaChanged")
         convert_b
         dup
         iftrue ofs4
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"displayObjectChanged")
         convert_b
         ofs4:
         iffalse ofs5
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"alphaChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_transform")
         getlex QName(PackageNamespace("mx.geom"),"Transform")
         astypelate
         coerce QName(PackageNamespace("mx.geom"),"Transform")
         setlocal2
         getlocal2
         not
         dup
         iftrue ofs6
         pop
         getlocal2
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyColorTransformAlpha")
         not
         ofs6:
         iffalse ofs5
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_effectiveAlpha")
         setproperty QName(PackageNamespace(""),"alpha")
         ofs5:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"blendModeChanged")
         convert_b
         dup
         iftrue ofs7
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"displayObjectChanged")
         convert_b
         ofs7:
         iffalse ofs8
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"blendModeChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_blendMode")
         pushstring "auto"
         ifne ofs9
         getlocal0
         getproperty QName(PackageNamespace(""),"alpha")
         pushbyte 0
         equals
         dup
         iftrue ofs10
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"alpha")
         pushbyte 1
         equals
         ofs10:
         iffalse ofs11
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"NORMAL")
         setproperty QName(PackageNamespace(""),"blendMode")
         jump ofs12
         ofs11:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlex QName(PackageNamespace("flash.display"),"BlendMode")
         getproperty QName(PackageNamespace(""),"LAYER")
         setproperty QName(PackageNamespace(""),"blendMode")
         ofs12:
         jump ofs13
         ofs9:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_blendMode")
         callproperty QName(PrivateNamespace(null,"#GraphicElement"),"isAIMBlendMode"), 1
         iftrue ofs14
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_blendMode")
         setproperty QName(PackageNamespace(""),"blendMode")
         jump ofs13
         ofs14:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         pushstring "normal"
         setproperty QName(PackageNamespace(""),"blendMode")
         ofs13:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"blendShaderChanged")
         iffalse ofs8
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"blendShaderChanged")
         jump ofs15
         ofs16:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs8
         ofs17:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorDodgeShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorDodgeShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs8
         ofs18:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorBurnShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ColorBurnShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs8
         ofs19:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"ExclusionShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"ExclusionShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs8
         ofs20:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"HueShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"HueShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs8
         ofs21:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"LuminosityShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs8
         ofs22:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"SaturationShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"SaturationShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs8
         ofs23:
         label
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         findpropstrict QName(PackageNamespace("mx.graphics.shaderClasses"),"SoftLightShader")
         constructprop QName(PackageNamespace("mx.graphics.shaderClasses"),"SoftLightShader"), 0
         setproperty QName(PackageNamespace(""),"blendShader")
         jump ofs8
         ofs24:
         label
         jump ofs8
         ofs15:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_blendMode")
         setlocal3
         pushstring "color"
         getlocal3
         ifstrictne ofs25
         pushbyte 0
         jump ofs26
         ofs25:
         pushstring "colordodge"
         getlocal3
         ifstrictne ofs27
         pushbyte 1
         jump ofs26
         ofs27:
         pushstring "colorburn"
         getlocal3
         ifstrictne ofs28
         pushbyte 2
         jump ofs26
         ofs28:
         pushstring "exclusion"
         getlocal3
         ifstrictne ofs29
         pushbyte 3
         jump ofs26
         ofs29:
         pushstring "hue"
         getlocal3
         ifstrictne ofs30
         pushbyte 4
         jump ofs26
         ofs30:
         pushstring "luminosity"
         getlocal3
         ifstrictne ofs31
         pushbyte 5
         jump ofs26
         ofs31:
         pushstring "saturation"
         getlocal3
         ifstrictne ofs32
         pushbyte 6
         jump ofs26
         ofs32:
         pushstring "softlight"
         getlocal3
         ifstrictne ofs33
         pushbyte 7
         jump ofs26
         ofs33:
         jump ofs34
         pushbyte 8
         jump ofs34
         ofs34:
         pushbyte 8
         ofs26:
         kill 3
         lookupswitch ofs24, [ofs16, ofs17, ofs18, ofs19, ofs20, ofs21, ofs22, ofs23, ofs24]
         ofs8:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"filtersChanged")
         convert_b
         dup
         iftrue ofs35
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"displayObjectChanged")
         convert_b
         ofs35:
         iffalse ofs36
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"filtersChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"filtersChanged")
         convert_b
         dup
         iftrue ofs37
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_clonedFilters")
         convert_b
         ofs37:
         iffalse ofs36
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_clonedFilters")
         setproperty QName(PackageNamespace(""),"filters")
         ofs36:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"maskChanged")
         convert_b
         dup
         iftrue ofs38
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"displayObjectChanged")
         convert_b
         ofs38:
         iffalse ofs39
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"maskChanged")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         iffalse ofs39
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         getproperty QName(PackageNamespace(""),"parent")
         iftrue ofs40
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         callpropvoid QName(PackageNamespace(""),"addChild"), 1
         getlex QName(PackageNamespace("spark.utils"),"MaskUtil")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         getlocal0
         getproperty QName(PackageNamespace(""),"parent")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyMask"), 2
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_drawnDisplayObject")
         iftrue ofs40
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlex QName(PackageNamespace("flash.display"),"Sprite")
         istypelate
         iffalse ofs41
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         getproperty QName(PackageNamespace(""),"graphics")
         callpropvoid QName(PackageNamespace(""),"clear"), 0
         jump ofs42
         ofs41:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlex QName(PackageNamespace("flash.display"),"Shape")
         istypelate
         iffalse ofs42
         findpropstrict QName(PackageNamespace("flash.display"),"Shape")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace("flash.display"),"Shape"), 1
         getproperty QName(PackageNamespace(""),"graphics")
         callpropvoid QName(PackageNamespace(""),"clear"), 0
         ofs42:
         getlocal0
         findpropstrict QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite")
         constructprop QName(PackageNamespace("spark.components.supportClasses"),"InvalidatingSprite"), 0
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_drawnDisplayObject")
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_drawnDisplayObject")
         callpropvoid QName(PackageNamespace(""),"addChild"), 1
         ofs40:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         setproperty QName(PackageNamespace(""),"mask")
         ofs39:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"luminositySettingsChanged")
         iffalse ofs43
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"luminositySettingsChanged")
         getlex QName(PackageNamespace("spark.utils"),"MaskUtil")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_maskType")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_luminosityInvert")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_luminosityClip")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyLuminositySettings"), 4
         ofs43:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"maskTypeChanged")
         convert_b
         dup
         iftrue ofs44
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"displayObjectChanged")
         convert_b
         ofs44:
         iffalse ofs45
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"maskTypeChanged")
         getlex QName(PackageNamespace("spark.utils"),"MaskUtil")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_mask")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_maskType")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_luminosityInvert")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_luminosityClip")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyMaskType"), 5
         ofs45:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"displayObjectChanged")
         iffalse ofs46
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         ifne ofs47
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         convert_b
         jump ofs48
         ofs47:
         pushtrue
         ofs48:
         setproperty QName(PackageNamespace(""),"visible")
         ofs46:
         pushtrue
         setlocal1
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"displayObjectChanged")
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"visibleChanged")
         iffalse ofs49
         getlocal0
         pushfalse
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"visibleChanged")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         ifne ofs50
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         setproperty QName(PackageNamespace(""),"visible")
         jump ofs49
         ofs50:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs49:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         dup
         iftrue ofs51
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"updatePending")
         convert_b
         ofs51:
         dup
         iftrue ofs52
         pop
         getlocal1
         convert_b
         ofs52:
         iffalse ofs53
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyComputedTransform"), 0
         ofs53:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function validateSize() : void
      {
         trait method QName(PackageNamespace(""),"validateSize")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         iftrue ofs0
         returnvoid
         ofs0:
         getlocal0
         pushfalse
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         getlocal0
         callproperty QName(PrivateNamespace(null,"#GraphicElement"),"measureSizes"), 0
         convert_b
         setlocal1
         getlocal1
         not
         dup
         iftrue ofs1
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"includeInLayout")
         not
         ofs1:
         iffalse ofs2
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         not
         dup
         iffalse ofs3
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         not
         ofs3:
         dup
         iffalse ofs4
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         not
         ofs4:
         iffalse ofs5
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"dispatchUpdateComplete"), 0
         ofs5:
         returnvoid
         ofs2:
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"invalidateParentSizeAndDisplayList"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function canSkipMeasurement() : Boolean
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"canSkipMeasurement")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs0
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs0:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function measureSizes() : Boolean
      {
         trait method QName(PrivateNamespace(null,"#GraphicElement"),"measureSizes")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 5
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         convert_d
         setlocal1
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         convert_d
         setlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         convert_d
         setlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         convert_d
         setlocal 4
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"canSkipMeasurement"), 0
         iftrue ofs0
         getlocal0
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"measure"), 0
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs1
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinWidth")
         lessthan
         ofs1:
         iffalse ofs2
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinWidth")
         initproperty QName(PackageNamespace(""),"measuredWidth")
         ofs2:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs3
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxWidth")
         greaterthan
         ofs3:
         iffalse ofs4
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxWidth")
         initproperty QName(PackageNamespace(""),"measuredWidth")
         ofs4:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs5
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredHeight")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinHeight")
         lessthan
         ofs5:
         iffalse ofs6
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMinHeight")
         initproperty QName(PackageNamespace(""),"measuredHeight")
         ofs6:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iffalse ofs7
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredHeight")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxHeight")
         greaterthan
         ofs7:
         iffalse ofs8
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitMaxHeight")
         initproperty QName(PackageNamespace(""),"measuredHeight")
         ofs8:
         getlocal1
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         equals
         not
         dup
         iftrue ofs9
         pop
         getlocal2
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         equals
         not
         ofs9:
         dup
         iftrue ofs10
         pop
         getlocal3
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         equals
         not
         ofs10:
         dup
         iftrue ofs11
         pop
         getlocal 4
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         equals
         not
         ofs11:
         iffalse ofs12
         pushtrue
         returnvalue
         ofs12:
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function measure() : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"measure")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"measuredWidth")
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"measuredHeight")
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"measuredX")
         getlocal0
         pushbyte 0
         initproperty QName(PackageNamespace(""),"measuredY")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function validateDisplayList() : void
      {
         trait method QName(PackageNamespace(""),"validateDisplayList")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         convert_b
         setlocal1
         getlocal0
         pushfalse
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         equals
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"updatePending")
         convert_b
         ofs0:
         iffalse ofs1
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyComputedTransform"), 0
         ofs1:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         ifeq ofs2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         getlex QName(PackageNamespace("flash.display"),"Sprite")
         istypelate
         iffalse ofs2
         findpropstrict QName(PackageNamespace("flash.display"),"Sprite")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"drawnDisplayObject")
         callproperty QName(PackageNamespace("flash.display"),"Sprite"), 1
         getproperty QName(PackageNamespace(""),"graphics")
         callpropvoid QName(PackageNamespace(""),"clear"), 0
         ofs2:
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"doUpdateDisplayList"), 0
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidatePropertiesFlag")
         not
         dup
         iffalse ofs3
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateSizeFlag")
         not
         ofs3:
         dup
         iffalse ofs4
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"invalidateDisplayListFlag")
         not
         ofs4:
         dup
         iffalse ofs5
         pop
         getlocal1
         convert_b
         ofs5:
         iffalse ofs6
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"dispatchUpdateComplete"), 0
         ofs6:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function doUpdateDisplayList() : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"doUpdateDisplayList")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"_effectiveVisibility")
         convert_b
         dup
         iftrue ofs0
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_UNSHARED_OBJECT")
         equals
         ofs0:
         iffalse ofs1
         getlocal0
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         callpropvoid QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"updateDisplayList"), 2
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      protected function updateDisplayList(param1:Number, param2:Number) : void
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"updateDisplayList")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 1
         localcount 3
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function dispatchUpdateComplete() : void
      {
         trait method QName(PrivateNamespace(null,"#GraphicElement"),"dispatchUpdateComplete")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"hasEventListener")
         getlex QName(PackageNamespace("mx.events"),"FlexEvent")
         getproperty QName(PackageNamespace(""),"UPDATE_COMPLETE")
         callproperty QName(PackageNamespace(""),"hasEventListener"), 1
         iffalse ofs0
         findpropstrict QName(PackageNamespace(""),"dispatchEvent")
         findpropstrict QName(PackageNamespace("mx.events"),"FlexEvent")
         getlex QName(PackageNamespace("mx.events"),"FlexEvent")
         getproperty QName(PackageNamespace(""),"UPDATE_COMPLETE")
         constructprop QName(PackageNamespace("mx.events"),"FlexEvent"), 1
         callpropvoid QName(PackageNamespace(""),"dispatchEvent"), 1
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getMaxBoundsWidth(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getMaxBoundsWidth")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformWidthForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getMaxBoundsHeight(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getMaxBoundsHeight")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformHeightForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getMinBoundsWidth(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getMinBoundsWidth")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformWidthForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getMinBoundsHeight(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getMinBoundsHeight")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformHeightForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getPreferredBoundsWidth(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getPreferredBoundsWidth")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformWidthForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getPreferredBoundsHeight(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getPreferredBoundsHeight")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformHeightForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getBoundsXAtSize(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getBoundsXAtSize")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 10
         localcount 8
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 4
         getlocal0
         getlocal3
         callproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         dup
         setlocal 5
         iftrue ofs0
         getlocal 4
         getproperty QName(PackageNamespace(""),"left")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         add
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs1
         getlocal1
         getlocal 4
         getproperty QName(PackageNamespace(""),"width")
         subtract
         convert_d
         setlocal1
         ofs1:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs2
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"height")
         subtract
         convert_d
         setlocal2
         ofs2:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal 5
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         callproperty QName(PackageNamespace(""),"fitBounds"), 9
         coerce QName(PackageNamespace("flash.geom"),"Point")
         dup
         setlocal 6
         iftrue ofs3
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 6
         ofs3:
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 7
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal 6
         getproperty QName(PackageNamespace(""),"x")
         getlocal 6
         getproperty QName(PackageNamespace(""),"y")
         getlocal 5
         getlocal 7
         callpropvoid QName(PackageNamespace(""),"transformBounds"), 4
         getlocal 4
         getproperty QName(PackageNamespace(""),"left")
         getlocal 7
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getBoundsYAtSize(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getBoundsYAtSize")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 10
         localcount 8
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 4
         getlocal0
         getlocal3
         callproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         dup
         setlocal 5
         iftrue ofs0
         getlocal 4
         getproperty QName(PackageNamespace(""),"top")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         add
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         ofs0:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs1
         getlocal1
         getlocal 4
         getproperty QName(PackageNamespace(""),"width")
         subtract
         convert_d
         setlocal1
         ofs1:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs2
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"height")
         subtract
         convert_d
         setlocal2
         ofs2:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal 5
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         callproperty QName(PackageNamespace(""),"fitBounds"), 9
         coerce QName(PackageNamespace("flash.geom"),"Point")
         dup
         setlocal 6
         iftrue ofs3
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 6
         ofs3:
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 7
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal 6
         getproperty QName(PackageNamespace(""),"x")
         getlocal 6
         getproperty QName(PackageNamespace(""),"y")
         getlocal 5
         getlocal 7
         callpropvoid QName(PackageNamespace(""),"transformBounds"), 4
         getlocal 4
         getproperty QName(PackageNamespace(""),"top")
         getlocal 7
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutBoundsX(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getLayoutBoundsX")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 5
         localcount 5
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"left")
         convert_d
         setlocal2
         getlocal0
         getlocal1
         callproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal3
         getlocal3
         iftrue ofs0
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         add
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         ofs0:
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal3
         getlocal 4
         callpropvoid QName(PackageNamespace(""),"transformBounds"), 4
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"x")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutBoundsY(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getLayoutBoundsY")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 5
         localcount 5
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"top")
         convert_d
         setlocal2
         getlocal0
         getlocal1
         callproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix"), 1
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal3
         getlocal3
         iftrue ofs0
         getlocal2
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         add
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         ofs0:
         findpropstrict QName(PackageNamespace("flash.geom"),"Point")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredX")
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredY")
         constructprop QName(PackageNamespace("flash.geom"),"Point"), 2
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 4
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal3
         getlocal 4
         callpropvoid QName(PackageNamespace(""),"transformBounds"), 4
         getlocal2
         getlocal 4
         getproperty QName(PackageNamespace(""),"y")
         add
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutBoundsWidth(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getLayoutBoundsWidth")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformWidthForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutBoundsHeight(param1:Boolean = true) : Number
      {
         trait method QName(PackageNamespace(""),"getLayoutBoundsHeight")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal1
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformHeightForLayout"), 3
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function transformWidthForLayout(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformWidthForLayout")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal3
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs0:
         iffalse ofs1
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PackageNamespace(""),"transformSize"), 3
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal1
         ofs1:
         getlocal1
         getlocal0
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"width")
         add
         convert_d
         setlocal1
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function transformHeightForLayout(param1:Number, param2:Number, param3:Boolean = true) : Number
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"transformHeightForLayout")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 4
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal3
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs0:
         iffalse ofs1
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PackageNamespace(""),"transformSize"), 3
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal2
         ofs1:
         getlocal2
         getlocal0
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         getproperty QName(PackageNamespace(""),"height")
         add
         convert_d
         setlocal2
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function preferredWidthPreTransform() : Number
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredWidth")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitWidth")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function preferredHeightPreTransform() : Number
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Number")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitHeight")
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs0
         getlocal0
         getproperty QName(PackageNamespace(""),"measuredHeight")
         convert_d
         jump ofs1
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"explicitHeight")
         convert_d
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setLayoutBoundsPosition(param1:Number, param2:Number, param3:Boolean = true) : void
      {
         trait method QName(PackageNamespace(""),"setLayoutBoundsPosition")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 10
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal3
         callproperty QName(PackageNamespace(""),"getLayoutBoundsX"), 1
         convert_d
         setlocal 4
         getlocal0
         getlocal3
         callproperty QName(PackageNamespace(""),"getLayoutBoundsY"), 1
         convert_d
         setlocal 5
         getlocal0
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal 6
         getlocal0
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal 7
         getlocal 6
         getlocal1
         add
         getlocal 4
         subtract
         convert_d
         setlocal 8
         getlocal 7
         getlocal2
         add
         getlocal 5
         subtract
         convert_d
         setlocal 9
         getlocal 8
         getlocal 6
         equals
         not
         dup
         iftrue ofs0
         pop
         getlocal 9
         getlocal 7
         equals
         not
         ofs0:
         iffalse ofs1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs2
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal 8
         setproperty QName(PackageNamespace(""),"layoutX")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal 9
         setproperty QName(PackageNamespace(""),"layoutY")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushtrue
         setproperty QName(PackageNamespace(""),"updatePending")
         jump ofs3
         ofs2:
         getlocal0
         getlocal 8
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_x")
         getlocal0
         getlocal 9
         initproperty QName(PrivateNamespace(null,"#GraphicElement"),"_y")
         ofs3:
         getlocal 8
         getlocal 6
         ifeq ofs4
         getlocal0
         pushstring "x"
         getlocal 6
         getlocal 8
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs4:
         getlocal 9
         getlocal 7
         ifeq ofs5
         getlocal0
         pushstring "y"
         getlocal 7
         getlocal 9
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs5:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs1:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function setLayoutBoundsSize(param1:Number, param2:Number, param3:Boolean = true) : void
      {
         trait method QName(PackageNamespace(""),"setLayoutBoundsSize")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Number")
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 10
         localcount 9
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal 4
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 5
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Point")
         setlocal 6
         pushnan
         setlocal 7
         pushnan
         setlocal 8
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         dup
         iftrue ofs0
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs0:
         iffalse ofs1
         getlocal0
         getlocal3
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents"), 1
         coerce QName(PackageNamespace("flash.geom"),"Rectangle")
         setlocal 5
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs2
         getlocal1
         getlocal 5
         getproperty QName(PackageNamespace(""),"width")
         subtract
         convert_d
         setlocal1
         ofs2:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iftrue ofs1
         getlocal2
         getlocal 5
         getproperty QName(PackageNamespace(""),"height")
         subtract
         convert_d
         setlocal2
         ofs1:
         getlocal3
         convert_b
         dup
         iffalse ofs3
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs3:
         iffalse ofs4
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal 4
         ofs4:
         getlocal 4
         iftrue ofs5
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal1
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs6
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         convert_d
         setlocal1
         ofs6:
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         iffalse ofs7
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         convert_d
         setlocal2
         ofs7:
         jump ofs8
         ofs5:
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal1
         getlocal2
         getlocal 4
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredWidthPreTransform"), 0
         getlocal0
         callproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"preferredHeightPreTransform"), 0
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxWidth")
         getlocal0
         getproperty QName(PackageNamespace(""),"maxHeight")
         callproperty QName(PackageNamespace(""),"fitBounds"), 9
         coerce QName(PackageNamespace("flash.geom"),"Point")
         dup
         setlocal 6
         iffalse ofs9
         getlocal 6
         getproperty QName(PackageNamespace(""),"x")
         convert_d
         setlocal1
         getlocal 6
         getproperty QName(PackageNamespace(""),"y")
         convert_d
         setlocal2
         jump ofs8
         ofs9:
         getlocal0
         getproperty QName(PackageNamespace(""),"minWidth")
         convert_d
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"minHeight")
         convert_d
         setlocal2
         ofs8:
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal1
         equals
         not
         dup
         iftrue ofs10
         pop
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal2
         equals
         not
         ofs10:
         iffalse ofs11
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         convert_d
         setlocal 7
         getlocal0
         getproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         convert_d
         setlocal 8
         getlocal0
         getlocal1
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_width")
         getlocal0
         getlocal2
         initproperty QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_height")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         iffalse ofs12
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutWidth")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 0
         ofs12:
         getlocal1
         getlocal 7
         ifeq ofs13
         getlocal0
         pushstring "width"
         getlocal 7
         getlocal1
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs13:
         getlocal2
         getlocal 8
         ifeq ofs14
         getlocal0
         pushstring "height"
         getlocal 8
         getlocal2
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"dispatchPropertyChangeEvent"), 3
         ofs14:
         getlocal0
         callpropvoid QName(PackageNamespace(""),"invalidateDisplayList"), 0
         ofs11:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutMatrix() : Matrix
      {
         trait method QName(PackageNamespace(""),"getLayoutMatrix")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.geom"),"Matrix")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         callproperty QName(PackageNamespace(""),"clone"), 0
         returnvalue
         ofs0:
         findpropstrict QName(PackageNamespace("flash.geom"),"Matrix")
         constructprop QName(PackageNamespace("flash.geom"),"Matrix"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_y")
         callpropvoid QName(PackageNamespace(""),"translate"), 2
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setLayoutMatrix(param1:Matrix, param2:Boolean) : void
      {
         trait method QName(PackageNamespace(""),"setLayoutMatrix")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Matrix")
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         getlocal1
         callproperty QName(PackageNamespace(""),"isEqual"), 2
         iffalse ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutMatrix")
         getlocal0
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         getlocal2
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function get hasLayoutMatrix3D() : Boolean
      {
         trait getter QName(PackageNamespace(""),"hasLayoutMatrix3D")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         iffalse ofs0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutIs3D")
         convert_b
         jump ofs1
         ofs0:
         pushfalse
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function get is3D() : Boolean
      {
         trait getter QName(PackageNamespace(""),"is3D")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 1
         localcount 1
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         iffalse ofs0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"is3D")
         convert_b
         jump ofs1
         ofs0:
         pushfalse
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function getLayoutMatrix3D() : Matrix3D
      {
         trait method QName(PackageNamespace(""),"getLayoutMatrix3D")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("flash.geom"),"Matrix3D")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix3D")
         callproperty QName(PackageNamespace(""),"clone"), 0
         returnvalue
         ofs0:
         findpropstrict QName(PackageNamespace("flash.geom"),"Matrix3D")
         constructprop QName(PackageNamespace("flash.geom"),"Matrix3D"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix3D")
         setlocal1
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_x")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_y")
         pushbyte 0
         callpropvoid QName(PackageNamespace(""),"appendTranslation"), 3
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function setLayoutMatrix3D(param1:Matrix3D, param2:Boolean) : void
      {
         trait method QName(PackageNamespace(""),"setLayoutMatrix3D")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.geom"),"Matrix3D")
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 4
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         callpropvoid QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"allocateLayoutFeatures"), 0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         convert_b
         setlocal3
         getlex QName(PackageNamespace("mx.utils"),"MatrixUtil")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix3D")
         getlocal1
         callproperty QName(PackageNamespace(""),"isEqual3D"), 2
         iffalse ofs0
         returnvoid
         ofs0:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getlocal1
         setproperty QName(PackageNamespace(""),"layoutMatrix3D")
         getlocal0
         getlocal3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"needsDisplayObject")
         equals
         not
         getlocal2
         callpropvoid QName(PrivateNamespace(null,"#GraphicElement"),"invalidateTransform"), 2
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function applyComputedTransform() : void
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"applyComputedTransform")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs0
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushfalse
         setproperty QName(PackageNamespace(""),"updatePending")
         ofs0:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"USES_SHARED_OBJECT")
         equals
         dup
         iftrue ofs1
         pop
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         not
         ofs1:
         iffalse ofs2
         returnvoid
         ofs2:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         pushnull
         ifeq ofs3
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"is3D")
         iffalse ofs4
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"computedMatrix3D")
         setproperty QName(PackageNamespace(""),"matrix3D")
         jump ofs5
         ofs4:
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"computedMatrix")
         callproperty QName(PackageNamespace(""),"clone"), 0
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         setlocal1
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_SHARED_OBJECT")
         ifne ofs6
         getlocal1
         pushbyte 0
         setproperty QName(PackageNamespace(""),"tx")
         getlocal1
         pushbyte 0
         setproperty QName(PackageNamespace(""),"ty")
         ofs6:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getproperty QName(PackageNamespace(""),"transform")
         getlocal1
         setproperty QName(PackageNamespace(""),"matrix")
         ofs5:
         jump ofs7
         ofs3:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObjectSharingMode")
         getlex QName(PackageNamespace("spark.core"),"DisplayObjectSharingMode")
         getproperty QName(PackageNamespace(""),"OWNS_SHARED_OBJECT")
         ifne ofs8
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"y")
         jump ofs7
         ofs8:
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_x")
         setproperty QName(PackageNamespace(""),"x")
         getlocal0
         getproperty QName(PackageNamespace(""),"displayObject")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_y")
         setproperty QName(PackageNamespace(""),"y")
         ofs7:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      mx_internal function getComplexMatrix(param1:Boolean) : Matrix
      {
         trait method QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"getComplexMatrix")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"Boolean")
         returns QName(PackageNamespace("flash.geom"),"Matrix")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal1
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"hasComplexLayoutMatrix")
         convert_b
         ofs0:
         iffalse ofs1
         getlocal0
         getproperty QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"layoutFeatures")
         getproperty QName(PackageNamespace(""),"layoutMatrix")
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         jump ofs2
         ofs1:
         pushnull
         coerce QName(PackageNamespace("flash.geom"),"Matrix")
         ofs2:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      protected function getStrokeExtents(param1:Boolean = true) : Rectangle
      {
         trait method QName(ProtectedNamespace("spark.primitives.supportClasses:GraphicElement"),"getStrokeExtents")
         dispid 0
         method
         name null
         flag HAS_OPTIONAL
         param QName(PackageNamespace(""),"Boolean")
         optional True()
         returns QName(PackageNamespace("flash.geom"),"Rectangle")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"x")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"y")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"width")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
         pushbyte 0
         setproperty QName(PackageNamespace(""),"height")
         getlex QName(Namespace("http://www.adobe.com/2006/flex/mx/internal"),"_strokeExtents")
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      private function filterChangedHandler(param1:Event) : void
      {
         trait method QName(PrivateNamespace(null,"#GraphicElement"),"filterChangedHandler")
         dispid 0
         method
         name null
         param QName(PackageNamespace("flash.events"),"Event")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 5
         maxscopedepth 6
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#GraphicElement"),"_filters")
         initproperty QName(PackageNamespace(""),"filters")
         returnvoid
         end ; code
         end ; body
         end ; method
      }
   }
}

method
name null
returns null

body
maxstack 2
localcount 1
initscopedepth 1
maxscopedepth 4

code
getlocal0
pushscope
findpropstrict Multiname("GraphicElement",[PackageNamespace("spark.primitives.supportClasses")])
getlex QName(PackageNamespace(""),"Object")
pushscope
getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
pushscope
getlex QName(PackageNamespace("flash.events"),"EventDispatcher")
newclass #GraphicElement
popscope
popscope
initproperty QName(PackageNamespace("spark.primitives.supportClasses"),"GraphicElement")
returnvoid
end ; code
end ; body
end ; method

