package com.adobe.serialization.json
{
   public class JSONTokenizer
   {
      method
      name null
      returns null
      
      body
      maxstack 1
      localcount 1
      initscopedepth 3
      maxscopedepth 4
      
      code
      getlocal0
      pushscope
      returnvoid
      end ; code
      end ; body
      end ; method
      
      private var strict:Boolean;
      
      private var obj:Object;
      
      private var jsonString:String;
      
      private var loc:int;
      
      private var ch:String;
      
      private const controlCharsRegExp:RegExp;
      
      public function JSONTokenizer(param1:String, param2:Boolean)
      {
         method
         name null
         param QName(PackageNamespace(""),"String")
         param QName(PackageNamespace(""),"Boolean")
         returns null
         
         body
         maxstack 3
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getlex QName(PackageNamespace(""),"RegExp")
         pushstring "[\\x00-\\x1F]"
         construct 1
         initproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"controlCharsRegExp")
         getlocal0
         constructsuper 0
         getlocal0
         getlocal1
         initproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"jsonString")
         getlocal0
         getlocal2
         initproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"strict")
         getlocal0
         pushbyte 0
         initproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      public function getNextToken() : JSONToken
      {
         trait method QName(PackageNamespace(""),"getNextToken")
         dispid 0
         method
         name null
         returns QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         
         body
         maxstack 3
         localcount 7
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushnull
         coerce_s
         setlocal2
         pushnull
         coerce_s
         setlocal3
         pushnull
         coerce_s
         setlocal 4
         pushnull
         coerce_s
         setlocal 5
         pushnull
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"skipIgnored"), 0
         jump ofs0
         ofs1:
         label
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"LEFT_BRACE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs3:
         label
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"RIGHT_BRACE")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs4:
         label
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"LEFT_BRACKET")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs5:
         label
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"RIGHT_BRACKET")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs6:
         label
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"COMMA")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs7:
         label
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"COLON")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs2
         ofs8:
         label
         pushstring "t"
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         coerce_s
         setlocal2
         getlocal2
         pushstring "true"
         ifne ofs9
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"TRUE")
         pushtrue
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs10
         ofs9:
         getlocal0
         pushstring "Expecting \'true\' but found "
         getlocal2
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs10:
         jump ofs2
         ofs11:
         label
         pushstring "f"
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         coerce_s
         setlocal3
         getlocal3
         pushstring "false"
         ifne ofs12
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"FALSE")
         pushfalse
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs13
         ofs12:
         getlocal0
         pushstring "Expecting \'false\' but found "
         getlocal3
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs13:
         jump ofs2
         ofs14:
         label
         pushstring "n"
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         coerce_s
         dup
         setlocal 4
         pushstring "null"
         ifne ofs15
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"NULL")
         pushnull
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs16
         ofs15:
         getlocal0
         pushstring "Expecting \'null\' but found "
         getlocal 4
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs16:
         jump ofs2
         ofs17:
         label
         pushstring "N"
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         add
         coerce_s
         dup
         setlocal 5
         pushstring "NaN"
         ifne ofs18
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"NAN")
         getlex QName(PackageNamespace(""),"NaN")
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs19
         ofs18:
         getlocal0
         pushstring "Expecting \'NaN\' but found "
         getlocal 5
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs19:
         jump ofs2
         ofs20:
         label
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"readString"), 0
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         jump ofs2
         ofs21:
         label
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         convert_b
         dup
         iftrue ofs22
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "-"
         equals
         ofs22:
         iffalse ofs23
         getlocal0
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"readNumber"), 0
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         jump ofs24
         ofs23:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring ""
         ifne ofs25
         pushnull
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal1
         jump ofs24
         ofs25:
         getlocal0
         pushstring "Unexpected "
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         pushstring " encountered"
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs24:
         jump ofs2
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         setlocal 6
         pushstring "{"
         getlocal 6
         ifstrictne ofs26
         pushbyte 0
         jump ofs27
         ofs26:
         pushstring "}"
         getlocal 6
         ifstrictne ofs28
         pushbyte 1
         jump ofs27
         ofs28:
         pushstring "["
         getlocal 6
         ifstrictne ofs29
         pushbyte 2
         jump ofs27
         ofs29:
         pushstring "]"
         getlocal 6
         ifstrictne ofs30
         pushbyte 3
         jump ofs27
         ofs30:
         pushstring ","
         getlocal 6
         ifstrictne ofs31
         pushbyte 4
         jump ofs27
         ofs31:
         pushstring ":"
         getlocal 6
         ifstrictne ofs32
         pushbyte 5
         jump ofs27
         ofs32:
         pushstring "t"
         getlocal 6
         ifstrictne ofs33
         pushbyte 6
         jump ofs27
         ofs33:
         pushstring "f"
         getlocal 6
         ifstrictne ofs34
         pushbyte 7
         jump ofs27
         ofs34:
         pushstring "n"
         getlocal 6
         ifstrictne ofs35
         pushbyte 8
         jump ofs27
         ofs35:
         pushstring "N"
         getlocal 6
         ifstrictne ofs36
         pushbyte 9
         jump ofs27
         ofs36:
         pushstring "\""
         getlocal 6
         ifstrictne ofs37
         pushbyte 10
         jump ofs27
         ofs37:
         jump ofs38
         pushbyte 11
         jump ofs38
         ofs38:
         pushbyte 11
         ofs27:
         kill 6
         lookupswitch ofs21, [ofs1, ofs3, ofs4, ofs5, ofs6, ofs7, ofs8, ofs11, ofs14, ofs17, ofs20, ofs21]
         ofs2:
         getlocal1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      final private function readString() : JSONToken
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"readString")
         flag FINAL
         dispid 0
         method
         name null
         returns QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         
         body
         maxstack 7
         localcount 5
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushbyte 0
         setlocal3
         pushbyte 0
         setlocal 4
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         convert_i
         setlocal1
         jump ofs0
         ofs1:
         label
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"jsonString")
         pushstring "\""
         getlocal1
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"indexOf"), 2
         convert_i
         setlocal1
         getlocal1
         pushbyte 0
         ifnge ofs2
         pushbyte 0
         setlocal3
         getlocal1
         decrement
         convert_i
         setlocal 4
         jump ofs3
         ofs4:
         label
         inclocal_i 3
         getlocal 4
         decrement_i
         setlocal 4
         ofs3:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"jsonString")
         getlocal 4
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"charAt"), 1
         pushstring "\\"
         ifeq ofs4
         getlocal3
         pushbyte 1
         bitand
         pushbyte 0
         ifne ofs5
         jump ofs6
         ofs5:
         inclocal_i 1
         jump ofs7
         ofs2:
         getlocal0
         pushstring "Unterminated string literal"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs7:
         jump ofs1
         ofs6:
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"STRING")
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"jsonString")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         subtract
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"substr"), 2
         callproperty QName(PackageNamespace(""),"unescapeString"), 1
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         coerce QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         setlocal2
         getlocal0
         getlocal1
         pushbyte 1
         add
         initproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      public function unescapeString(param1:String) : String
      {
         trait method QName(PackageNamespace(""),"unescapeString")
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 5
         localcount 12
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushbyte 0
         setlocal 4
         pushnull
         coerce_s
         setlocal 6
         pushnull
         coerce_s
         setlocal 7
         pushbyte 0
         setlocal 8
         pushbyte 0
         setlocal 9
         pushnull
         coerce_s
         setlocal 10
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"strict")
         convert_b
         dup
         iffalse ofs0
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"controlCharsRegExp")
         getlocal1
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"test"), 1
         convert_b
         ofs0:
         iffalse ofs1
         getlocal0
         pushstring "String contains unescaped control character (0x00-0x1F)"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs1:
         pushstring ""
         setlocal2
         pushbyte 0
         setlocal3
         pushbyte 0
         setlocal 4
         getlocal1
         getproperty QName(PackageNamespace(""),"length")
         convert_i
         setlocal 5
         jump ofs2
         ofs3:
         label
         ofs2:
         getlocal1
         pushstring "\\"
         getlocal 4
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"indexOf"), 2
         convert_i
         setlocal3
         getlocal3
         pushbyte 0
         ifnge ofs4
         getlocal2
         getlocal1
         getlocal 4
         getlocal3
         getlocal 4
         subtract
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"substr"), 2
         add
         coerce_s
         setlocal2
         getlocal3
         pushbyte 2
         add
         convert_i
         setlocal 4
         getlocal1
         getlocal3
         pushbyte 1
         add
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"charAt"), 1
         coerce_s
         setlocal 6
         jump ofs5
         ofs6:
         label
         getlocal2
         getlocal 6
         add
         coerce_s
         setlocal2
         jump ofs7
         ofs8:
         label
         getlocal2
         getlocal 6
         add
         coerce_s
         setlocal2
         jump ofs7
         ofs9:
         label
         getlocal2
         pushstring "\n"
         add
         setlocal2
         jump ofs7
         ofs10:
         label
         getlocal2
         pushstring "\r"
         add
         setlocal2
         jump ofs7
         ofs11:
         label
         getlocal2
         pushstring "\t"
         add
         setlocal2
         jump ofs7
         ofs12:
         label
         pushstring ""
         setlocal 7
         getlocal 4
         pushbyte 4
         add
         convert_i
         dup
         setlocal 8
         getlocal 5
         ifngt ofs13
         getlocal0
         pushstring "Unexpected end of input.  Expecting 4 hex digits after \\u."
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs13:
         getlocal 4
         convert_i
         setlocal 9
         jump ofs14
         ofs15:
         label
         getlocal1
         getlocal 9
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"charAt"), 1
         coerce_s
         setlocal 10
         getlocal0
         getlocal 10
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isHexDigit"), 1
         iftrue ofs16
         getlocal0
         pushstring "Excepted a hex digit, but found: "
         getlocal 10
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs16:
         getlocal 7
         getlocal 10
         add
         coerce_s
         setlocal 7
         inclocal_i 9
         ofs14:
         getlocal 9
         getlocal 8
         iflt ofs15
         getlocal2
         getlex QName(PackageNamespace(""),"String")
         findpropstrict QName(PackageNamespace(""),"parseInt")
         getlocal 7
         pushbyte 16
         callproperty QName(PackageNamespace(""),"parseInt"), 2
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"fromCharCode"), 1
         add
         coerce_s
         setlocal2
         getlocal 8
         convert_i
         setlocal 4
         jump ofs7
         ofs17:
         label
         getlocal2
         pushstring "\f"
         add
         setlocal2
         jump ofs7
         ofs18:
         label
         getlocal2
         pushstring "/"
         add
         setlocal2
         jump ofs7
         ofs19:
         label
         getlocal2
         pushstring "\b"
         add
         setlocal2
         jump ofs7
         ofs20:
         label
         getlocal2
         pushstring "\\"
         getlocal 6
         add
         add
         coerce_s
         setlocal2
         jump ofs7
         ofs5:
         getlocal 6
         setlocal 11
         pushstring "\""
         getlocal 11
         ifstrictne ofs21
         pushbyte 0
         jump ofs22
         ofs21:
         pushstring "\\"
         getlocal 11
         ifstrictne ofs23
         pushbyte 1
         jump ofs22
         ofs23:
         pushstring "n"
         getlocal 11
         ifstrictne ofs24
         pushbyte 2
         jump ofs22
         ofs24:
         pushstring "r"
         getlocal 11
         ifstrictne ofs25
         pushbyte 3
         jump ofs22
         ofs25:
         pushstring "t"
         getlocal 11
         ifstrictne ofs26
         pushbyte 4
         jump ofs22
         ofs26:
         pushstring "u"
         getlocal 11
         ifstrictne ofs27
         pushbyte 5
         jump ofs22
         ofs27:
         pushstring "f"
         getlocal 11
         ifstrictne ofs28
         pushbyte 6
         jump ofs22
         ofs28:
         pushstring "/"
         getlocal 11
         ifstrictne ofs29
         pushbyte 7
         jump ofs22
         ofs29:
         pushstring "b"
         getlocal 11
         ifstrictne ofs30
         pushbyte 8
         jump ofs22
         ofs30:
         jump ofs31
         pushbyte 9
         jump ofs31
         ofs31:
         pushbyte 9
         ofs22:
         kill 11
         lookupswitch ofs20, [ofs6, ofs8, ofs9, ofs10, ofs11, ofs12, ofs17, ofs18, ofs19, ofs20]
         ofs7:
         jump ofs32
         ofs4:
         getlocal2
         getlocal1
         getlocal 4
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"substr"), 1
         add
         coerce_s
         setlocal2
         jump ofs33
         ofs32:
         getlocal 4
         getlocal 5
         iflt ofs3
         ofs33:
         getlocal2
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      final private function readNumber() : JSONToken
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"readNumber")
         flag FINAL
         dispid 0
         method
         name null
         returns QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         
         body
         maxstack 3
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushstring ""
         setlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "-"
         ifne ofs0
         getlocal1
         pushstring "-"
         add
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs0:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs1
         getlocal0
         pushstring "Expecting a digit"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "0"
         ifne ofs2
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iffalse ofs3
         getlocal0
         pushstring "A digit cannot immediately follow 0"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         jump ofs4
         ofs3:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"strict")
         not
         dup
         iffalse ofs5
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "x"
         equals
         ofs5:
         iffalse ofs4
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isHexDigit"), 1
         iffalse ofs6
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs7
         ofs6:
         getlocal0
         pushstring "Number in hex format require at least one hex digit after \"0x\""
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs7:
         jump ofs8
         ofs9:
         label
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs8:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isHexDigit"), 1
         iftrue ofs9
         ofs4:
         jump ofs10
         ofs2:
         jump ofs11
         ofs12:
         label
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs11:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs12
         ofs10:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "."
         ifne ofs13
         getlocal1
         pushstring "."
         add
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs14
         getlocal0
         pushstring "Expecting a digit"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs14:
         jump ofs15
         ofs16:
         label
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs15:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs16
         ofs13:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "e"
         equals
         dup
         iftrue ofs17
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "E"
         equals
         ofs17:
         iffalse ofs18
         getlocal1
         pushstring "e"
         add
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "+"
         equals
         dup
         iftrue ofs19
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "-"
         equals
         ofs19:
         iffalse ofs20
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs20:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs21
         getlocal0
         pushstring "Scientific notation number needs exponent value"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs21:
         jump ofs22
         ofs23:
         label
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         coerce_s
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs22:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         iftrue ofs23
         ofs18:
         findpropstrict QName(PackageNamespace(""),"Number")
         getlocal1
         callproperty QName(PackageNamespace(""),"Number"), 1
         convert_d
         setlocal2
         findpropstrict QName(PackageNamespace(""),"isFinite")
         getlocal2
         callproperty QName(PackageNamespace(""),"isFinite"), 1
         convert_b
         dup
         iffalse ofs24
         pop
         findpropstrict QName(PackageNamespace(""),"isNaN")
         getlocal2
         callproperty QName(PackageNamespace(""),"isNaN"), 1
         not
         ofs24:
         iffalse ofs25
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONToken")
         getlex QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenType")
         getproperty QName(PackageNamespace(""),"NUMBER")
         getlocal2
         callproperty QName(PackageInternalNs("com.adobe.serialization.json"),"create"), 2
         returnvalue
         ofs25:
         getlocal0
         pushstring "Number "
         getlocal2
         add
         pushstring " is not valid!"
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         pushnull
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      final private function nextChar() : String
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar")
         flag FINAL
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"String")
         
         body
         maxstack 5
         localcount 3
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"jsonString")
         getlocal0
         dup
         setlocal1
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         dup
         increment_i
         setlocal2
         getlocal1
         getlocal2
         setproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         kill 2
         kill 1
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"charAt"), 1
         dup
         setlocal1
         initproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         getlocal1
         kill 1
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      final private function skipIgnored() : void
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"skipIgnored")
         flag FINAL
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         pushbyte 0
         setlocal1
         jump ofs0
         ofs1:
         label
         ofs0:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         convert_i
         setlocal1
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"skipWhite"), 0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"skipComments"), 0
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         ifne ofs1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      private function skipComments() : void
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"skipComments")
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 3
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "/"
         ifne ofs0
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs1
         ofs2:
         label
         jump ofs3
         ofs4:
         label
         ofs3:
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "\n"
         equals
         not
         dup
         iffalse ofs5
         pop
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring ""
         equals
         not
         ofs5:
         iftrue ofs4
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs0
         ofs6:
         label
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs7
         ofs8:
         label
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "*"
         ifne ofs9
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring "/"
         ifne ofs10
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         jump ofs11
         ofs10:
         jump ofs12
         ofs9:
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs12:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         pushstring ""
         ifne ofs7
         getlocal0
         pushstring "Multi-line comment not closed"
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         ofs7:
         jump ofs8
         ofs11:
         jump ofs0
         ofs13:
         label
         getlocal0
         pushstring "Unexpected "
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         add
         pushstring " encountered (expecting \'/\' or \'*\' )"
         add
         callpropvoid QName(PackageNamespace(""),"parseError"), 1
         jump ofs0
         ofs1:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         setlocal1
         pushstring "/"
         getlocal1
         ifstrictne ofs14
         pushbyte 0
         jump ofs15
         ofs14:
         pushstring "*"
         getlocal1
         ifstrictne ofs16
         pushbyte 1
         jump ofs15
         ofs16:
         jump ofs17
         pushbyte 2
         jump ofs17
         ofs17:
         pushbyte 2
         ofs15:
         kill 1
         lookupswitch ofs13, [ofs2, ofs6, ofs13]
         ofs0:
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      final private function skipWhite() : void
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"skipWhite")
         flag FINAL
         dispid 0
         method
         name null
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 2
         localcount 1
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         jump ofs0
         ofs1:
         label
         getlocal0
         callpropvoid QName(PrivateNamespace(null,"#JSONTokenizer"),"nextChar"), 0
         ofs0:
         getlocal0
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"ch")
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isWhiteSpace"), 1
         iftrue ofs1
         returnvoid
         end ; code
         end ; body
         end ; method
      }
      
      final private function isWhiteSpace(param1:String) : Boolean
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"isWhiteSpace")
         flag FINAL
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal1
         pushstring " "
         equals
         dup
         iftrue ofs0
         pop
         getlocal1
         pushstring "\t"
         equals
         ofs0:
         dup
         iftrue ofs1
         pop
         getlocal1
         pushstring "\n"
         equals
         ofs1:
         dup
         iftrue ofs2
         pop
         getlocal1
         pushstring "\r"
         equals
         ofs2:
         iffalse ofs3
         pushtrue
         returnvalue
         ofs3:
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"strict")
         not
         dup
         iffalse ofs4
         pop
         getlocal1
         pushbyte 0
         callproperty QName(Namespace("http://adobe.com/AS3/2006/builtin"),"charCodeAt"), 1
         pushshort 160
         equals
         ofs4:
         iffalse ofs5
         pushtrue
         returnvalue
         ofs5:
         pushfalse
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      final private function isDigit(param1:String) : Boolean
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit")
         flag FINAL
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal1
         pushstring "0"
         greaterequals
         dup
         iffalse ofs0
         pop
         getlocal1
         pushstring "9"
         lessequals
         ofs0:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      final private function isHexDigit(param1:String) : Boolean
      {
         trait method QName(PrivateNamespace(null,"#JSONTokenizer"),"isHexDigit")
         flag FINAL
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"Boolean")
         
         body
         maxstack 2
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         getlocal0
         getlocal1
         callproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"isDigit"), 1
         convert_b
         dup
         iftrue ofs0
         pop
         getlocal1
         pushstring "A"
         greaterequals
         dup
         iffalse ofs0
         pop
         getlocal1
         pushstring "F"
         lessequals
         ofs0:
         dup
         iftrue ofs1
         pop
         getlocal1
         pushstring "a"
         greaterequals
         dup
         iffalse ofs1
         pop
         getlocal1
         pushstring "f"
         lessequals
         ofs1:
         returnvalue
         end ; code
         end ; body
         end ; method
      }
      
      final public function parseError(param1:String) : void
      {
         trait method QName(PackageNamespace(""),"parseError")
         flag FINAL
         dispid 0
         method
         name null
         param QName(PackageNamespace(""),"String")
         returns QName(PackageNamespace(""),"void")
         
         body
         maxstack 4
         localcount 2
         initscopedepth 4
         maxscopedepth 5
         
         code
         getlocal0
         pushscope
         findpropstrict QName(PackageNamespace("com.adobe.serialization.json"),"JSONParseError")
         getlocal1
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"loc")
         getlocal0
         getproperty QName(PrivateNamespace(null,"#JSONTokenizer"),"jsonString")
         constructprop QName(PackageNamespace("com.adobe.serialization.json"),"JSONParseError"), 3
         throw
         end ; code
         end ; body
         end ; method
      }
   }
}

method
name null
returns null

body
maxstack 2
localcount 1
initscopedepth 1
maxscopedepth 3

code
getlocal0
pushscope
findpropstrict Multiname("JSONTokenizer",[PackageNamespace("com.adobe.serialization.json")])
getlex QName(PackageNamespace(""),"Object")
pushscope
getlex QName(PackageNamespace(""),"Object")
newclass #JSONTokenizer
popscope
initproperty QName(PackageNamespace("com.adobe.serialization.json"),"JSONTokenizer")
returnvoid
end ; code
end ; body
end ; method

